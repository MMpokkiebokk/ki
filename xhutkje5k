game = cloneref(game)
local Workspace = game:GetService("Workspace") 
local function gs(service) return game:GetService(service) end
local _tweenservice, _runservice, _coregui, _uis, _http = gs("TweenService"), gs("RunService"), gs("CoreGui"), gs("UserInputService"), gs("HttpService")
local mouse = gs("Players").LocalPlayer:GetMouse()
local ab = {}
local Library = {
    Ui_Bind = Enum.KeyCode.RightShift,
    Colors = {
        Window = Color3.fromRGB(9, 9, 9),
        BorderColor = Color3.fromRGB(40, 40, 40),
        Accent = Color3.fromRGB(139, 158, 252),
        TopBar = Color3.fromRGB(9, 9, 9),
        TopText = Color3.fromRGB(100,100,100),
        TabContainer = Color3.fromRGB(9, 9, 9),
        TabActive = Color3.fromRGB(200, 200, 200),
        TabInactive = Color3.fromRGB(100, 100, 100),
        ContentContainer = Color3.fromRGB(9, 9, 9),
        Section = Color3.fromRGB(9, 9, 9),
        SectionText = Color3.fromRGB(150,150,150),
        RiskyActive = Color3.fromRGB(200, 0, 0),
        RiskyInactive = Color3.fromRGB(100, 0, 0),
        ElementActive = Color3.fromRGB(125, 125, 125),
        ElementInactive = Color3.fromRGB(80, 80, 80),
    },
    Instances = {},
    Connections = {},
    Font = nil,
}
-- Font registration function
function Library:Register_Font(Name, Weight, Style, Asset)
    if not isfile(Asset.Id) then writefile(Asset.Id, Asset.Font) end
    if isfile(Name .. ".font") then delfile(Name .. ".font") end
    local Data = {
        name = Name,
        faces = {
            {
                name = "Regular",
                weight = Weight,
                style = Style,
                assetId = getcustomasset(Asset.Id),
            },
        },
    }
    writefile(Name .. ".font", _http:JSONEncode(Data))
    return getcustomasset(Name .. ".font")
end
-- Helper functions
function Library:Create(Class, Properties, Secure)
    local _Instance
    if Secure then
        _Instance = cloneref(Instance.new(Class))
    else 
        _Instance = type(Class) == 'string' and Instance.new(Class) or Class 
    end
    for Property, Value in next, Properties do
        _Instance[Property] = Value
    end
    table.insert(self.Instances, _Instance)
    return _Instance
end
function Library:validate(defaults, options)
    for i,v in pairs(defaults) do
        if options[i] == nil then
            options[i] = v
        end
    end
    return options
end
function Library:connection(signal, callback, tbl)
    local connection = signal:Connect(callback)
    table.insert(self.Connections, connection)
    if tbl then table.insert(tbl, connection) end
    return connection
end
function Library:unload()
    for _,v in next, self.Instances do 
        if v and v.Parent then 
            v:Destroy() 
        end 
    end
    for _,v in next, self.Connections do 
        if v then 
            v:Disconnect() 
        end 
    end
end
function Library:tween(object, goal, callback)
    local tween = _tweenservice:Create(object, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), goal)
    if callback then
        tween.Completed:Connect(callback)
    end
    tween:Play()
end
function lerp(startValue, endValue, duration, callback)
    local startTime = tick()
    local completed = false
    task.spawn(function()
        while true do
            local currentTime = tick() - startTime
            if currentTime >= duration then
                callback(endValue)
                completed = true
                break
            end
            local progress = currentTime / duration
            local lerped = startValue + (endValue - startValue) * (1 - (1 - progress) * (1 - progress))
            callback(lerped)
            task.wait()
        end
    end)
    while not completed do
        task.wait()
    end
end
local SCREENGUI
local MarketplaceService = game:GetService("MarketplaceService")
local SoundService = game:GetService("SoundService")
local productInfo = MarketplaceService:GetProductInfo(game.PlaceId)
local gameName = productInfo.Name
local dropdownindex = 50
ab.AddWindow = function (options)
    local options = options or {}
    options = Library:validate({
        name = string.format('<font color="rgb(%d, %d, %d)">Funny.KM</font> | @Kdyriz', Library.Colors.Accent.R * 255, Library.Colors.G * 255, Library.Colors.B * 255),
        size = UDim2.new(0, 625, 0, 400),
        WaterMark = {
            Enabled = true, 
            TextSize = 9,
            TextTransparency = 0,
            TextStrokeTransparency = 0,
        },
    }, options or {})
    
    local menu = {CurrentTab = nil}
    
    SCREENGUI = Library:Create("ScreenGui", {
        Parent = _coregui,
        ZIndexBehavior = Enum.ZIndexBehavior.Global,
        Name = options.name
    }, true)
    -- Watermark setup
    local WATERMARK_FRAME = Library:Create("Frame", {
        Name = "WatermarkFrame",
        Parent = SCREENGUI,
        AutomaticSize = Enum.AutomaticSize.XY,
        Position = UDim2.new(0.5, 0, 0, 5),
        AnchorPoint = Vector2.new(0.5, 0),
        Size = UDim2.new(0, 0, 0, 0),
        BackgroundTransparency = 0.5,
        BackgroundColor3 = Library.Colors.Window,
        Visible = true,
    })
    
    local WATERMARK_TEXT = Library:Create("TextButton", {
        Name = "WatermarkText",
        Parent = WATERMARK_FRAME,
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        AutomaticSize = Enum.AutomaticSize.XY,
        Position = UDim2.new(0, 0, 0, 0),
        FontFace = Library.Font,
        TextSize = options.WaterMark.TextSize,
        TextTransparency = options.WaterMark.TextTransparency,
        TextStrokeTransparency = options.WaterMark.TextStrokeTransparency,
        TextXAlignment = Enum.TextXAlignment.Center,
        RichText = true,
        TextColor3 = Library.Colors.Accent,
        Text = "Watermark Loading...",
    })
    
    Library:Create("UIPadding", {
        Parent = WATERMARK_FRAME,
        PaddingBottom = UDim.new(0, 3),
        PaddingLeft = UDim.new(0, 3),
        PaddingRight = UDim.new(0, 3),
        PaddingTop = UDim.new(0, 3),
    })
    
    -- Main window setup
    local WINDOW = Library:Create("Frame", {
        Parent = SCREENGUI,
        Size = options.size,
        AnchorPoint = Vector2.new("0.5","0.5"),
        Position = UDim2.new(0.5, -100, 0.5, 0),
        BackgroundColor3 = Library.Colors.Window,
        BorderSizePixel = 0,
        Name = "Window",
        ZIndex = -2,
    })
    
    local originalBorderColor = Library.Colors.BorderColor
    local originalTextColor = Color3.fromRGB(255, 255, 255)
    local isHovering = false
    
    -- Watermark interactions
    Library:connection(WATERMARK_TEXT.MouseEnter, function()
        isHovering = true
        Library:tween(WATERMARK_TEXT, {BorderColor3 = originalBorderColor, TextColor3 = originalTextColor})
    end)
    
    Library:connection(WATERMARK_TEXT.MouseLeave, function()
        isHovering = false
        Library:tween(WATERMARK_TEXT, {BorderColor3 = Library.Colors.Accent, TextColor3 = Library.Colors.Accent})
    end)
    
    Library:connection(WATERMARK_TEXT.MouseButton1Click, function()
        WINDOW.Visible = not WINDOW.Visible
        if not WINDOW.Visible and not isHovering then
            Library:tween(WATERMARK_TEXT, {BorderColor3 =  originalBorderColor, TextColor3 = originalTextColor})
        end
    end)
    
    -- Window outline
    local WINDOW_OUTLINE = Library:Create("Frame", {
        Parent = WINDOW,
        Size = UDim2.new(1,-2,1,-2),
        AnchorPoint = Vector2.new("0.5","0.5"),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        BackgroundTransparency = 1,
        Name = "Outline",
        ZIndex = -1,
    })
    
    Library:Create("UIStroke", { 
        Parent = WINDOW_OUTLINE,
        Color = Library.Colors.BorderColor,
        LineJoinMode = Enum.LineJoinMode.Miter,
    })
    
    -- Modal background
    Library:Create("TextButton", {
        Parent = WINDOW,
        Size = UDim2.new(0, 1, 0, 1),
        BackgroundTransparency = 1,
        TextTransparency = 1,
        BorderSizePixel = 0,
        Name = "mb",
        Modal = true
    })
    
    -- Topbar setup
    local TOPBAR = Library:Create("Frame", {
        Parent = WINDOW,
        BackgroundColor3 = Library.Colors.TopBar,
        BorderSizePixel = 0,
        Size = UDim2.new(1, -6, 0, 18),
        Position = UDim2.new(0,3,0,3),
        Name = "Topbar"
    })
    
    Library:Create("Frame", { 
        Parent = TOPBAR,
        BackgroundColor3 = Library.Colors.Accent,
        BorderSizePixel = 0,
        Size = UDim2.new(1,4,0,1),
        Position = UDim2.new(0.5,0,1,1),
        AnchorPoint = Vector2.new(0.5,1),
    })
    
    local TOP_OVERLAY = Library:Create("Frame", {
        Parent = TOPBAR,
        BackgroundColor3 = Library.Colors.Accent,
        BorderSizePixel = 0,
        Size = UDim2.new(1,4,1,0),
        Position = UDim2.new(0.5,0,1,2),
        AnchorPoint = Vector2.new(0.5,1),
        ZIndex = 2
    })
    
    Library:Create("UIGradient", { 
        Parent = TOP_OVERLAY,
        Transparency = NumberSequence.new({
            NumberSequenceKeypoint.new(0, 1),
            NumberSequenceKeypoint.new(0.8, 0.7),
            NumberSequenceKeypoint.new(1, 1.0),
        }),
        Rotation = 90
    })
    
    Library:Create("TextLabel", { 
        Parent = TOPBAR,
        Size = UDim2.new(0, 0, 1, 0),
        Position = UDim2.new(0,6,0,0),
        TextColor3 = Library.Colors.TopText,
        BorderSizePixel = 0,
        TextSize = 9,
        RichText = true,
        Text = options.name,
        FontFace = Library.Font,
        TextXAlignment = Enum.TextXAlignment.Left,
        Name = "Title"
    })
    
    Library:Create("TextLabel", { 
        Parent = TOPBAR,
        Size = UDim2.new(0, 0, 1, 0),
        Position = UDim2.new(1,-6,0,0.5,0.5),
        AnchorPoint = Vector2.new(1,0.5),
        TextColor3 = Library.Colors.TopText,
        BorderSizePixel = 0,
        TextSize = 9,
        RichText = true,
        Text = string.lower(os.date("%A, %d %B, %y")),
        FontFace = Library.Font,
        TextXAlignment = Enum.TextXAlignment.Right,
        Name = "Title"
    })
    
    -- Tab container setup
    local TABCONTAINER = Library:Create("Frame", {
        Parent = WINDOW,
        BackgroundTransparency = 1,
        Size = UDim2.new(0,120,1,-35),
        Position = UDim2.new(0,10,0.5,10),
        AnchorPoint = Vector2.new(0,0.5),
        Name = "TabContainer"
    })
    
    Library:Create("UIPadding", { 
        Parent = TABCONTAINER,
        PaddingTop = UDim.new(0, 10),
        PaddingLeft = UDim.new(0, 10),
        PaddingRight = UDim.new(0, 10),
        PaddingBottom = UDim.new(0, 10)
    })
    
    Library:Create("UIListLayout", { 
        Parent = TABCONTAINER,
        SortOrder = Enum.SortOrder.LayoutOrder,
        FillDirection = Enum.FillDirection.Vertical,
        HorizontalAlignment = Enum.HorizontalAlignment.Center,
        VerticalAlignment = Enum.VerticalAlignment.Top,
        Padding = UDim.new(0, 8),
    })
    
    Library:Create("UIStroke", { 
        Parent = TABCONTAINER,
        Color = Library.Colors.BorderColor
    })
    
    -- Inner container setup - ScrollingFrame để có thể cuộn
    local INNERCONTAINER = Library:Create("ScrollingFrame", {
        Parent = WINDOW,
        Size = UDim2.new(1, -150, 1, -35),
        Position = UDim2.new(0, 140, 0, 28),
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Name = "InnerContainer",
        CanvasSize = UDim2.new(0, 0, 0, 0),
        ScrollBarThickness = 4,
        ScrollBarImageColor3 = Library.Colors.Accent,
        ScrollingDirection = Enum.ScrollingDirection.Y,
        VerticalScrollBarInset = Enum.ScrollBarInset.ScrollBar,
        AutomaticCanvasSize = Enum.AutomaticSize.Y,
    })
    
    Library:Create("UIListLayout", { 
        Parent = INNERCONTAINER,
        SortOrder = Enum.SortOrder.LayoutOrder,
        FillDirection = Enum.FillDirection.Vertical,
        Padding = UDim.new(0, 5),
    })
    
    Library:Create("UIStroke", { 
        Parent = INNERCONTAINER,
        Color = Library.Colors.BorderColor,
        LineJoinMode = Enum.LineJoinMode.Miter,
    })
    
    -- Tab deactivation function
    local function deactivate(tab)
        for _, content in ipairs(INNERCONTAINER:GetChildren()) do
            if content.Name == tab.Name then
                content.Visible = false
            end
        end
        Library:tween(tab.TabText, {Position = UDim2.new(0,12,0.5,0),})
        Library:tween(tab.TabBar, {Position = UDim2.new(0,0,0.5,0),})
        Library:tween(tab.TabOverlay, {Position = UDim2.new(0,0,0,0)})
        Library:tween(tab.TabText, {TextColor3 = Library.Colors.TabInactive})
        Library:tween(tab.TabOverlay, {BackgroundTransparency = 1})
    end
    
    -- Watermark functionality
    local watermarkStartTime = os.clock()
    
    function Library:WatermarkTextTriggers(text)
        local AccentColor = Library.Colors.Accent
        local elapsed = os.clock() - watermarkStartTime
        local mins = math.floor(elapsed / 60)
        local secs = math.floor(elapsed % 60)
    
        local Triggers = {
            ['{user}'] = game.Players.LocalPlayer.Name,
            ['{ServerTime}'] = Workspace:GetServerTimeNow(),
            ['{name}'] = ('<font color="rgb(%s, %s, %s)">Funny.KM</font>'):format(
                math.floor(AccentColor.R * 255),
                math.floor(AccentColor.G * 255),
                math.floor(AccentColor.B * 255)
            ),
            ['{hour}'] = os.date("%H"),
            ['{minute}'] = os.date("%M"),
            ['{second}'] = os.date("%S"),
            ['{ap}'] = os.date("%p"),
            ['{month}'] = os.date("%b"),
            ['{day}'] = os.date("%d"),
            ['{year}'] = os.date("%Y"),
            ['{fps}'] = tostring(math.floor(1 / game:GetService("RunService").RenderStepped:Wait())),
            ['{ping}'] = tostring(math.floor(game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValue() or 0)),
            ['{time}'] = os.date("%H:%M:%S"),
            ['{date}'] = os.date("%b. %d, %Y"),
            ['{usage}'] = string.format("%dm %ds", mins, secs),
        }
    
        for key, value in pairs(Triggers) do
            text = text:gsub(key, value)
        end
        return text
    end
 
    -- Watermark update system
    local watermarkContent = "{name} |User: {user} | Usage: {usage} | Ping: {ping}ms | Fps: {fps} |RealTime : {time} | Date: {date} | ServerTime: {ServerTime} "
    local watermarkTick = 0.1
    local watermarkLastUpdate = os.clock()
    
    function Library:SetWatermarkContent(newText)
        watermarkContent = newText
    end
    
    function Library:SetWatermarkUpdateRate(rate)
        watermarkTick = rate
    end
    
    function Library:ToggleWatermark(visible)
        WATERMARK_FRAME.Visible = visible
    end
    
    Library:connection(game:GetService("RunService").RenderStepped, function()
        local now = os.clock()
        if now - watermarkLastUpdate >= watermarkTick then
            watermarkLastUpdate = now
            WATERMARK_TEXT.Text = Library:WatermarkTextTriggers(watermarkContent)
        end
        if options.WaterMark.Enabled then 
            Library:ToggleWatermark(true)
        else
            Library:ToggleWatermark(false)
        end 
    end)
    
    -- Tab creation function
    function menu:AddTab(options)
        options = Library:validate({
            name = "example"
        }, options or {})
        
        local tab = {}
        
        local TAB = Library:Create("Frame", {
            Parent = TABCONTAINER,
            BackgroundTransparency = 1,
            Size = UDim2.new(1,0,0,15),
            Name = options.name
        })
        
        local TAB_OVERLAY = Library:Create("Frame", {
            Parent = TAB,
            Size = UDim2.new(1,0,1,0),
            BackgroundTransparency = 1,
            BackgroundColor3 = Library.Colors.Accent,
            Name = "TabOverlay"
        })
        
        Library:Create("UIGradient", { 
            Parent = TAB_OVERLAY,
            Transparency = NumberSequence.new({
                NumberSequenceKeypoint.new(0, 0.8),
                NumberSequenceKeypoint.new(0.4, 1),
                NumberSequenceKeypoint.new(1, 1),
            }),
        })
        
        local TABBAR = Library:Create("Frame", {
            Parent = TAB,
            BackgroundColor3 = Library.Colors.Accent,
            Size = UDim2.new(0,1,1,0),
            Position = UDim2.new(0,0,0.5,0),
            AnchorPoint = Vector2.new(0,0.5),
            Name = "TabBar"
        })
        
        local TABTEXT = Library:Create("TextLabel", {
            Parent = TAB,
            BackgroundTransparency = 1,
            Size = UDim2.new(1,-12,1,0),
            Position = UDim2.new(0,12,0.5,0),
            AnchorPoint = Vector2.new(0,0.5),
            TextColor3 = Library.Colors.TabInactive,
            FontFace = Library.Font,
            TextSize = 9,
            TextXAlignment = Enum.TextXAlignment.Left,
            Text = options.name,
            Name = "TabText"
        })
        
        -- Tab content container - Frame
        local CONTENTCONTAINER = Library:Create("Frame", {
            Parent = INNERCONTAINER,
            Size = UDim2.new(1, 0, 1, 0),
            AnchorPoint = Vector2.new(0.5, 0.5),
            Position = UDim2.new(0.5, 0, 0.5, 0),
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            Visible = false,
            Name = options.name
        })
        
        -- Tạo LEFTCONTAINER và RIGHTCONTAINER là Frame bình thường
        local LEFTCONTAINER = Library:Create("Frame", {
            Parent = CONTENTCONTAINER,
            Size = UDim2.new(0.5, -6, 1, 0),
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            Name = "LeftContainer"
        })
        
        Library:Create("UIPadding", {
            Parent = LEFTCONTAINER,
            PaddingTop = UDim.new(0,10),
            PaddingBottom = UDim.new(0,10),
            PaddingLeft = UDim.new(0,10),
        })
        
        local RIGHTCONTAINER = Library:Create("Frame", {
            Parent = CONTENTCONTAINER,
            Size = UDim2.new(0.5, -6, 1, 0),
            AnchorPoint = Vector2.new(1, 0),
            Position = UDim2.new(1, 0, 0, 0),
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            Name = "RightContainer"
        })
        
        Library:Create("UIPadding", {
            Parent = RIGHTCONTAINER,
            PaddingTop = UDim.new(0,10),
            PaddingBottom = UDim.new(0,10),
            PaddingRight = UDim.new(0,10),
        })
        
        -- Thêm UIListLayout cho LEFTCONTAINER và RIGHTCONTAINER
        Library:Create("UIListLayout", { 
            Parent = LEFTCONTAINER,
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = UDim.new(0, 8),
            Name = "LeftLayout"
        })
        
        Library:Create("UIListLayout", { 
            Parent = RIGHTCONTAINER,
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = UDim.new(0, 8),
            Name = "RightLayout"
        })
        
        -- Lưu trữ tham chiếu đến các container trong tab
        tab.CONTENTCONTAINER = CONTENTCONTAINER
        tab.LEFTCONTAINER = LEFTCONTAINER
        tab.RIGHTCONTAINER = RIGHTCONTAINER
        
        -- Tab functionality
        local function Activate()
            CONTENTCONTAINER.Visible = true
            
            Library:tween(TABTEXT, {Position = UDim2.new(0,18,0.5,0),})
            Library:tween(TABBAR, {Position = UDim2.new(0,6,0.5,0),})
            Library:tween(TAB_OVERLAY, {Position = UDim2.new(0,6,0,0,0),})
            Library:tween(TABTEXT, {TextColor3 = Library.Colors.TabActive})
            Library:tween(TABBAR, {BackgroundTransparency = 0})
            menu.CurrentTab = TAB
        end
        
        local function switchTab(tab_instance)
            Library:tween(TABTEXT, {TextColor3 = Library.Colors.TabActive})
            Library:tween(TAB_OVERLAY, {BackgroundTransparency = 0})
            for _, content in pairs(TABCONTAINER:GetChildren()) do
                if content:IsA("Frame") and content.Name ~= tab_instance.Name then
                    deactivate(content)
                end
            end
            Activate()
        end
        
        Library:connection(TAB.MouseEnter, function()
            if menu.CurrentTab ~= TAB then 
                Library:tween(TABTEXT, {TextColor3 = Library.Colors.TabActive}) 
            end
            local input = Library:connection(_uis.InputBegan, function(key)
                if key.UserInputType == Enum.UserInputType.MouseButton1 or key.UserInputType == Enum.UserInputType.Touch then
                    switchTab(TAB)
                end
            end)
            local leave
            leave = Library:connection(TAB.MouseLeave, function()
                if menu.CurrentTab ~= TAB then 
                    Library:tween(TABTEXT, {TextColor3 = Library.Colors.TabInactive}) 
                end
                input:Disconnect()
                leave:Disconnect()
            end)
        end)
        
        if menu.CurrentTab == nil then
            switchTab(TAB)
        end
        
        -- Sub-tab functionality
        local SUBTABCONTAINER
        local LeftHeight = {}
        local RightHeight = {}
        local NewPos = 0
        getgenv().subtab = false
        
        local function subdeactivate(subtab)
            local ContentContainer = INNERCONTAINER[subtab.Parent.Parent.Name]
            for _, content in ipairs(ContentContainer:GetChildren()) do
                if content.Name == subtab.Name then
                    content.Visible = false
                end
            end
            Library:tween(subtab.SubTabText, {TextColor3 = Library.Colors.TabInactive})
            Library:tween(subtab.SubTabBar, {BackgroundTransparency = 1})
        end
        
        function tab:AddTab(options)
            options = Library:validate({
                name = "preview",
            }, options or {})
            
            local subtab = {CurrentTab = nil}
            getgenv().subtab = true
            
            if not CONTENTCONTAINER:FindFirstChild("SubTabContainer") then
                SUBTABCONTAINER = Library:Create("Frame", {
                    Parent = CONTENTCONTAINER,
                    Size = UDim2.new(1,0,0,20),
                    Name = "SubTabContainer"
                })
        
                Library:Create("UIListLayout", {
                    Parent = SUBTABCONTAINER,
                    FillDirection = Enum.FillDirection.Horizontal,
                    VerticalAlignment = Enum.VerticalAlignment.Center,
                    SortOrder = Enum.SortOrder.LayoutOrder,
                })
                
                Library:Create("UIStroke", {
                    Parent = SUBTABCONTAINER,
                    Color = Library.Colors.BorderColor
                })
                
                Library:Create("UIGradient", { 
                    Parent = SUBTABCONTAINER,
                    Color = ColorSequence.new{
                        ColorSequenceKeypoint.new(0, Color3.fromRGB(30, 30, 30)),
                        ColorSequenceKeypoint.new(0.7, Library.Colors.Section.R, Library.Colors.Section.G, Library.Colors.Section.B),
                        ColorSequenceKeypoint.new(1, Library.Colors.Section.R, Library.Colors.Section.G, Library.Colors.Section.B)
                    },
                    Transparency = NumberSequence.new({
                        NumberSequenceKeypoint.new(0, 0),
                        NumberSequenceKeypoint.new(0.85, 1),
                        NumberSequenceKeypoint.new(1, 1),
                    }),
                    Rotation = 90,
                })
            end
        
            local SUBTAB = Library:Create("Frame", {
                Parent = SUBTABCONTAINER,
                BorderSizePixel = 0,
                BackgroundTransparency = 1,
                Size = UDim2.new(1,0,1,0),
                Name = options.name
            })
            
            -- Fit tabs in container
            do
                local tabCount = 0
                for _, subtab_frame in ipairs(SUBTABCONTAINER:GetChildren()) do
                    if subtab_frame:IsA("Frame") then
                        tabCount = tabCount + 1
                    end
                end
                local finalValue = math.round(SUBTABCONTAINER.AbsoluteSize.X / tabCount)
                for _, subtab_frame in ipairs(SUBTABCONTAINER:GetChildren()) do
                    if subtab_frame:IsA("Frame") then
                        subtab_frame.Size = UDim2.new(0, finalValue, 1, 0)
                    end
                end
            end
        
            local SUBTABTEXT = Library:Create("TextLabel", { 
                Parent = SUBTAB,
                BackgroundTransparency = 1,
                TextColor3 = Library.Colors.TabInactive,
                FontFace = Library.Font,
                TextSize = 9,
                Size = UDim2.new(1,0,1,0),
                Text = options.name,
                Name = "SubTabText"
            })
        
            local SUBTABBAR = Library:Create("Frame", {
                Parent = SUBTAB,
                BackgroundColor3 = Library.Colors.Accent,
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                AnchorPoint = Vector2.new(0.5,1),
                Position = UDim2.new(0.5,0,1,2),
                Size = UDim2.new(1,0,0,1),
                Name = "SubTabBar"
            })
        
            -- Sub-tab content container
            local SUBCONTENTCONTAINER = Library:Create("Frame", {
                Parent = CONTENTCONTAINER,
                BackgroundTransparency = 1,
                Visible = false,
                Position = UDim2.new(0,0,0,25),
                Size = UDim2.new(1,0,1,-25),
                Name = options.name
            })
            
            -- Tạo ScrollingFrame cho sub-tab container
            local SUBLEFTCONTAINER = Library:Create("ScrollingFrame", {
                Parent = SUBCONTENTCONTAINER,
                Size = UDim2.new(0.5, -6, 1, 0),
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                Name = "LeftContainer",
                CanvasSize = UDim2.new(0, 0, 0, 0),
                ScrollBarThickness = 4,
                ScrollBarImageColor3 = Library.Colors.Accent,
                ScrollingDirection = Enum.ScrollingDirection.Y,
                VerticalScrollBarInset = Enum.ScrollBarInset.ScrollBar,
                AutomaticCanvasSize = Enum.AutomaticSize.Y,
            })
            
            local SUBRIGHTCONTAINER = Library:Create("ScrollingFrame", {
                Parent = SUBCONTENTCONTAINER,
                Size = UDim2.new(0.5, -6, 1, 0),
                AnchorPoint = Vector2.new(1, 0),
                Position = UDim2.new(1, 0, 0, 0),
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                Name = "RightContainer",
                CanvasSize = UDim2.new(0, 0, 0, 0),
                ScrollBarThickness = 4,
                ScrollBarImageColor3 = Library.Colors.Accent,
                ScrollingDirection = Enum.ScrollingDirection.Y,
                VerticalScrollBarInset = Enum.ScrollBarInset.ScrollBar,
                AutomaticCanvasSize = Enum.AutomaticSize.Y,
            })

            Library:Create("UIListLayout", { 
                Parent = SUBLEFTCONTAINER,
                SortOrder = Enum.SortOrder.LayoutOrder,
                Padding = UDim.new(0, 8),
                Name = "LeftLayout"
            })
            
            Library:Create("UIListLayout", { 
                Parent = SUBRIGHTCONTAINER,
                SortOrder = Enum.SortOrder.LayoutOrder,
                Padding = UDim.new(0, 8),
                Name = "RightLayout"
            })

            local function updateSubContainerCanvasSize(container)
                local layout = container:FindFirstChildOfClass("UIListLayout")
                if layout then
                    local padding = container:FindFirstChildOfClass("UIPadding")
                    local topPadding = padding and padding.PaddingTop.Offset or 0
                    local bottomPadding = padding and padding.PaddingBottom.Offset or 0
                    local leftPadding = padding and padding.PaddingLeft.Offset or 0
                    local rightPadding = padding and padding.PaddingRight.Offset or 0
                    
                    container.CanvasSize = UDim2.new(
                        0, 0,
                        0, layout.AbsoluteContentSize.Y + topPadding + bottomPadding
                    )
                end
            end

            Library:connection(SUBLEFTCONTAINER.ChildAdded, function(child)
                if child:IsA("GuiObject") then
                    updateSubContainerCanvasSize(SUBLEFTCONTAINER)
                end
            end)
            
            Library:connection(SUBRIGHTCONTAINER.ChildAdded, function(child)
                if child:IsA("GuiObject") then
                    updateSubContainerCanvasSize(SUBRIGHTCONTAINER)
                end
            end)
        
            LeftHeight[options.name] = {}
            RightHeight[options.name] = {}
            
            -- Sub-tab functionality
            do
                local function Activate()
                    SUBCONTENTCONTAINER.Visible = true
                
                    Library:tween(SUBTABTEXT, {TextColor3 = Library.Colors.TabActive})
                    Library:tween(SUBTABBAR, {BackgroundTransparency = 0})
                    subtab.CurrentTab = SUBTAB
                end
                
                local function switchTab(subtab_instance)
                    Library:tween(SUBTABTEXT, {TextColor3 = Library.Colors.TabActive})
                    Library:tween(SUBTABBAR, {BackgroundTransparency = 0})
                    for _, content in pairs(SUBTABCONTAINER:GetChildren()) do
                        if content:IsA("Frame") and content.Name ~= subtab_instance.Name then
                            subdeactivate(content)
                        end
                    end
                    Activate()
                end
        
                Library:connection(SUBTAB.MouseEnter, function()
                    if subtab.CurrentTab ~= SUBTAB then 
                        Library:tween(SUBTABTEXT, {TextColor3 = Library.Colors.TabActive}) 
                    end
                    local input = Library:connection(_uis.InputBegan, function(key)
                        if key.UserInputType == Enum.UserInputType.MouseButton1 or key.UserInputType == Enum.UserInputType.Touch then
                            switchTab(SUBTAB)
                        end
                    end)
                    local leave
                    leave = Library:connection(SUBTAB.MouseLeave, function()
                        if subtab.CurrentTab ~= SUBTAB then 
                            Library:tween(SUBTABTEXT, {TextColor3 = Library.Colors.TabInactive}) 
                        end
                        input:Disconnect()
                        leave:Disconnect()
                    end)
                end)
        
                if subtab.CurrentTab == nil then
                    switchTab(SUBTAB)
                end
            end
        
            return subtab
        end
        
        -- Thay đổi phần AddSection trong function tab:AddSection
        function tab:AddSection(options)
            options = Library:validate({
                tab = nil,
                name = "preview",
                side = "Left",
                height = "fill", -- fill, half,
                layoutOrder = 1, -- Thêm LayoutOrder để sắp xếp section
            }, options or {})
            
            local section = { Hover = false, }
            
            -- Tạo section với LayoutOrder để sắp xếp tự động
            local sectionLayoutOrder = options.layoutOrder or 1
            
            local SECTION = Library:Create("Frame", {
                Parent = (options.side == "Right" and RIGHTCONTAINER or LEFTCONTAINER),
                Size = UDim2.new(1, 0, 0, 150), -- Chiều cao cố định cho section
                BackgroundColor3 = Library.Colors.Section,
                BorderSizePixel = 0,
                Name = options.name,
                LayoutOrder = sectionLayoutOrder,
            })
            
            local SECTIONTEXT = Library:Create("TextLabel", {
                Parent = SECTION,
                AnchorPoint = Vector2.new(0.5,0),
                Position = UDim2.new(0.5,0,0,-6),
                BackgroundColor3 = Library.Colors.Section,
                BorderSizePixel = 0,
                TextColor3 = Library.Colors.SectionText,
                TextSize = 9,
                FontFace = Library.Font,
                Text = options.name,
                Name = "SectionText"
            })
            
            Library:connection(SECTIONTEXT:GetPropertyChangedSignal("TextBounds"), function() 
                SECTIONTEXT.Size = UDim2.new(0,SECTIONTEXT.TextBounds.X + 25,0,10) 
            end)
            
            -- Thay thế phần ELEMENTCONTAINER trong hàm AddSection
            local ELEMENTCONTAINER = Library:Create("ScrollingFrame", {
                Parent = SECTION,
                Size = UDim2.new(1, 0, 1, -10),
                Position = UDim2.new(0, 0, 0, 10),
                BackgroundTransparency = 1,
                Name = "ElementContainer",
                CanvasSize = UDim2.new(0, 0, 0, 0),
                ScrollBarThickness = 4,
                ScrollBarImageColor3 = Library.Colors.Accent,
                BorderSizePixel = 0,
                ScrollingDirection = Enum.ScrollingDirection.Y,
                VerticalScrollBarInset = Enum.ScrollBarInset.ScrollBar,
                AutomaticCanvasSize = Enum.AutomaticSize.Y,
            })
            
            Library:Create("UIListLayout", { 
                Parent = ELEMENTCONTAINER,
                SortOrder = Enum.SortOrder.LayoutOrder,
                Padding = UDim.new(0, 8),
                Name = "ElementLayout"
            })
            
            -- Thêm sự kiện để cập nhật CanvasSize khi thêm phần tử mới
            local function updateCanvasSize()
                local UIListLayout = ELEMENTCONTAINER:FindFirstChild("ElementLayout")
                if UIListLayout then
                    local padding = ELEMENTCONTAINER:FindFirstChild("UIPadding")
                    local topPadding = padding and padding.PaddingTop.Offset or 0
                    local bottomPadding = padding and padding.PaddingBottom.Offset or 0
                    local leftPadding = padding and padding.PaddingLeft.Offset or 0
                    local rightPadding = padding and padding.PaddingRight.Offset or 0
                    
                    ELEMENTCONTAINER.CanvasSize = UDim2.new(
                        0, UIListLayout.AbsoluteContentSize.X + leftPadding + rightPadding,
                        0, UIListLayout.AbsoluteContentSize.Y + topPadding + bottomPadding
                    )
                end
            end
            
            Library:Create("UIPadding", { 
                Parent = ELEMENTCONTAINER,
                PaddingLeft = UDim.new(0,15),
                PaddingRight = UDim.new(0,15),
                PaddingTop = UDim.new(0,5),
                PaddingBottom = UDim.new(0,5),
            })
            
            -- Theo dõi khi thêm phần tử mới để cập nhật CanvasSize
            Library:connection(ELEMENTCONTAINER.ChildAdded, function(child)
                if child:IsA("GuiObject") then
                    updateCanvasSize()
                end
            end)
            
            -- Cập nhật CanvasSize của INNERCONTAINER khi thêm section mới
            local function updateInnerContainerCanvasSize()
                local layout = INNERCONTAINER:FindFirstChildOfClass("UIListLayout")
                if layout then
                    local padding = INNERCONTAINER:FindFirstChild("UIPadding")
                    local topPadding = padding and padding.PaddingTop.Offset or 0
                    local bottomPadding = padding and padding.PaddingBottom.Offset or 0
                    
                    INNERCONTAINER.CanvasSize = UDim2.new(
                        0, 0,
                        0, layout.AbsoluteContentSize.Y + topPadding + bottomPadding
                    )
                end
            end
            
            -- Cập nhật CanvasSize khi thêm section mới
            updateInnerContainerCanvasSize()
            
            -- Button element
            function section:AddButton(options)
                options = Library:validate({
                    name = "button",
                    callback = function() end,
                }, options or {})
                
                local BUTTONCONTAINER = Library:Create("Frame", {
                    Parent = ELEMENTCONTAINER,
                    Size = UDim2.new(1, 0, 0, 15),
                    Name = options.name,
                    BackgroundTransparency = 1
                })
                
                local BUTTON = Library:Create("Frame", {
                    Parent = BUTTONCONTAINER,
                    Size = UDim2.new(1, 0, 1, 0),
                    Position = UDim2.new(0, 0, 0, 0),
                    Name = "Button",
                    BackgroundColor3 = Color3.fromRGB(20, 20, 20),
                    BorderSizePixel = 1,
                    BorderColor3 = Library.Colors.BorderColor
                })
                
                Library:Create("UIGradient", {
                    Parent = BUTTON,
                    Color = ColorSequence.new{
                        ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255,255)),
                        ColorSequenceKeypoint.new(0.5, Color3.fromRGB(175, 175, 175)),
                        ColorSequenceKeypoint.new(1, Color3.fromRGB(145, 145, 145))
                    },
                    Rotation = 90,
                })
                
                local BUTTONTITLE = Library:Create("TextLabel", {
                    Parent = BUTTON,
                    Size = UDim2.new(1, 0, 1, 0),
                    BackgroundTransparency = 1,
                    TextColor3 = Library.Colors.ElementInactive,
                    TextSize = 9,
                    Text = options.name,
                    FontFace = Library.Font,
                    TextXAlignment = Enum.TextXAlignment.Center,
                    Name = "ButtonTitle"
                })
                
                -- Button functionality
                Library:connection(BUTTON.MouseEnter, function()
                    Library:tween(BUTTONTITLE, {TextColor3 = Library.Colors.ElementActive})
                    local input = Library:connection(_uis.InputBegan, function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                            options.callback()
                        end
                    end)
                    local leave
                    leave = Library:connection(BUTTON.MouseLeave, function()
                        input:Disconnect()
                        leave:Disconnect()
                        Library:tween(BUTTONTITLE, {TextColor3 = Library.Colors.ElementInactive})
                    end)
                end)
                
                return
            end
            
            -- Textbox element
            function section:AddTextbox(options)
                options = Library:validate({
                    name = "example textbox",
                    default = "Test",
                    callback = function() end,
                }, options or {})
                
                local TEXTBOX = Library:Create("Frame", {
                    Parent = ELEMENTCONTAINER,
                    Name = "textbox",
                    BackgroundColor3 = Color3.fromRGB(20,20,20),
                    BackgroundTransparency = 0,
                    BorderSizePixel = 1,
                    BorderColor3 = Library.Colors.BorderColor,
                    Size = UDim2.new(1, 0, 0, 15),
                    ZIndex = 10,
                })
                
                Library:Create("UIGradient", {
                    Parent = TEXTBOX,
                    Color = ColorSequence.new{
                        ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
                        ColorSequenceKeypoint.new(0.5, Color3.fromRGB(175, 175, 175)),
                        ColorSequenceKeypoint.new(1, Color3.fromRGB(145, 145, 145))
                    },
                    Rotation = 90,
                })
                
                local BACKGROUND = Library:Create("Frame", {
                    Parent = TEXTBOX,
                    Name = "BACKGROUND",
                    Position = UDim2.new(0, 0, 0, 0),
                    Size = UDim2.new(1, 0, 1, 0),
                    BackgroundTransparency = 0,
                })
                
                local MAIN = Library:Create("ScrollingFrame", {
                    Parent = BACKGROUND,
                    Name = "main",
                    Active = true,
                    BackgroundColor3 = Color3.fromRGB(12, 12, 12),
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(1, 0, 1, 0),
                    CanvasSize = UDim2.new(0, 0, 0, 0),
                    ScrollBarThickness = 0,
                })
                
                local BOX = Library:Create("TextBox", {
                    Name = "box",
                    Parent = MAIN,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    BackgroundTransparency = 1.0,
                    Selectable = false,
                    Size = UDim2.new(1, 0, 1, 0),
                    FontFace = Library.Font,
                    Text = options.default or "",
                    TextColor3 = Library.Colors.ElementInactive,
                    TextSize = 9,
                    TextStrokeTransparency = 0,
                    TextXAlignment = Enum.TextXAlignment.Center,
                    ZIndex = 10
                })
                
                -- Textbox functionality
                Library:connection(BOX.MouseEnter, function()
                    Library:tween(BOX, {TextColor3 = Library.Colors.ElementActive})
                end)
            
                Library:connection(BOX.MouseLeave, function()
                    Library:tween(BOX, {TextColor3 = Library.Colors.ElementInactive})
                end)
                
                Library:connection(BOX:GetPropertyChangedSignal("Text"), function()
                    -- Không ghi đè lên tên section nữa
                end)
                
                Library:connection(BOX.FocusLost, function(enterPressed)
                    local text = BOX.Text
                    local callback_text = text ~= "" and text or options.default
                    
                    if enterPressed and options.callback then
                        options.callback(callback_text)
                    end
                end)
                
                return
            end
            
            -- Slider element - Thêm mới
            function section:AddSlider(options)
                options = Library:validate({
                    name = "example slider",
                    min = 0,
                    max = 100,
                    default = 50,
                    decimals = 0, -- Số chữ số thập phân
                    callback = function() end,
                }, options or {})
                
                local slider = {
                    Value = options.default,
                    Dragging = false
                }
                
                local SLIDERCONTAINER = Library:Create("Frame", {
                    Parent = ELEMENTCONTAINER,
                    Size = UDim2.new(1, 0, 0, 15),
                    Name = options.name,
                    BackgroundTransparency = 1
                })
                
                local SLIDERTITLE = Library:Create("TextLabel", {
                    Parent = SLIDERCONTAINER,
                    Size = UDim2.new(0.5, 0, 1, 0),
                    BackgroundTransparency = 1,
                    TextColor3 = Library.Colors.ElementInactive,
                    TextSize = 9,
                    Text = options.name,
                    FontFace = Library.Font,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    Name = "SliderTitle"
                })
                
                local SLIDERVALUE = Library:Create("TextLabel", {
                    Parent = SLIDERCONTAINER,
                    Size = UDim2.new(0.5, 0, 1, 0),
                    Position = UDim2.new(0.5, 0, 0, 0),
                    BackgroundTransparency = 1,
                    TextColor3 = Library.Colors.ElementInactive,
                    TextSize = 9,
                    Text = tostring(options.default),
                    FontFace = Library.Font,
                    TextXAlignment = Enum.TextXAlignment.Right,
                    Name = "SliderValue"
                })
                
                local SLIDER = Library:Create("Frame", {
                    Parent = SLIDERCONTAINER,
                    Size = UDim2.new(1, 0, 0, 4),
                    Position = UDim2.new(0, 0, 1, -5),
                    BackgroundColor3 = Color3.fromRGB(20, 20, 20),
                    BorderSizePixel = 1,
                    BorderColor3 = Library.Colors.BorderColor,
                    Name = "Slider"
                })
                
                local SLIDERFILL = Library:Create("Frame", {
                    Parent = SLIDER,
                    Size = UDim2.new((options.default - options.min) / (options.max - options.min), 0, 1, 0),
                    BackgroundColor3 = Library.Colors.Accent,
                    BorderSizePixel = 0,
                    Name = "SliderFill"
                })
                
                local SLIDERCIRCLE = Library:Create("Frame", {
                    Parent = SLIDER,
                    Size = UDim2.new(0, 8, 0, 8),
                    Position = UDim2.new((options.default - options.min) / (options.max - options.min), -4, 0.5, -4),
                    BackgroundColor3 = Library.Colors.Accent,
                    BorderSizePixel = 1,
                    BorderColor3 = Color3.fromRGB(255, 255, 255),
                    Name = "SliderCircle"
                })
                
                -- Slider functionality
                local function updateSlider(input)
                    local percent = math.clamp((input.Position.X - SLIDER.AbsolutePosition.X) / SLIDER.AbsoluteSize.X, 0, 1)
                    local value = options.min + (options.max - options.min) * percent
                    
                    -- Làm tròn theo số chữ số thập phân
                    local multiplier = 10 ^ options.decimals
                    value = math.floor(value * multiplier + 0.5) / multiplier
                    
                    slider.Value = value
                    SLIDERFILL.Size = UDim2.new(percent, 0, 1, 0)
                    SLIDERCIRCLE.Position = UDim2.new(percent, -4, 0.5, -4)
                    SLIDERVALUE.Text = tostring(value)
                    
                    options.callback(value)
                end
                
                Library:connection(SLIDER.MouseEnter, function()
                    Library:tween(SLIDERCIRCLE, {BackgroundColor3 = Library.Colors.ElementActive})
                end)
                
                Library:connection(SLIDER.MouseLeave, function()
                    if not slider.Dragging then
                        Library:tween(SLIDERCIRCLE, {BackgroundColor3 = Library.Colors.Accent})
                    end
                end)
                
                Library:connection(SLIDER.InputBegan, function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                        slider.Dragging = true
                        updateSlider(input)
                        
                        local draggingConnection = Library:connection(_uis.InputChanged, function(input)
                            if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                                updateSlider(input)
                            end
                        end)
                        
                        local endConnection
                        endConnection = Library:connection(_uis.InputEnded, function(input)
                            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                                slider.Dragging = false
                                Library:tween(SLIDERCIRCLE, {BackgroundColor3 = Library.Colors.Accent})
                                draggingConnection:Disconnect()
                                endConnection:Disconnect()
                            end
                        end)
                    end
                end)
                
                return slider
            end
            
            -- Toggle element
            function section:AddToggle(options)
                options = Library:validate({
                    name = "example toggle",
                    default = false,
                    risky = false,
                    callback = function() end,
                }, options or {})
                
                local toggle = {
                    Hover = false,
                    State = options.default
                }
                
                local TOGGLECONTAINER = Library:Create("Frame", {
                    Size = UDim2.new(1,0,0,14),
                    Parent = ELEMENTCONTAINER,
                    BackgroundTransparency = 1,
                    Name = "ToggleContainer",
                })
                
                local TOGGLE = Library:Create("Frame", {
                    Parent = TOGGLECONTAINER,
                    Size = UDim2.new(0,9,0,9),
                    BackgroundColor3 = Color3.fromRGB(20, 20, 20),
                    AnchorPoint = Vector2.new(0, 0.5),
                    Position = UDim2.new(0, 0, 0.5, 0),
                    Name = "Toggle",
                })
                
                Library:Create("UIGradient", { 
                    Color = ColorSequence.new{
                        ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
                        ColorSequenceKeypoint.new(0.5, Color3.fromRGB(175, 175, 175)),
                        ColorSequenceKeypoint.new(1, Color3.fromRGB(145, 145, 145))
                    },
                    Rotation = 90,
                    Parent = TOGGLE,
                })
                
                local TOGGLE_OUTLINE = Library:Create("UIStroke", {
                    Thickness = 1,
                    Color = Color3.fromRGB(0, 0, 0),
                    LineJoinMode = Enum.LineJoinMode.Miter,
                    Parent = TOGGLE,
                    Name = "UIStroke",
                })
                
                local TOGGLETITLE = Library:Create("TextLabel", {
                    Parent = TOGGLECONTAINER,
                    AnchorPoint = Vector2.new(0, 0.5),
                    Position = UDim2.new(0, 20, 0, 7),
                    BackgroundTransparency = 1,
                    TextSize = 9,
                    Text = options.name,
                    FontFace = Library.Font,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    Name = "ToggleTitle",
                })
                
                local SUBELEMENTHOLDER = Library:Create("Frame", {
                    Parent = TOGGLECONTAINER,
                    Size = UDim2.new(1,-5,1,0),
                    Position = UDim2.new(0,5,0,0,0),
                    BackgroundTransparency = 1,
                    Name = "elementholder",
                })
                
                Library:Create("UIListLayout", {
                    Parent = SUBELEMENTHOLDER,
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    FillDirection = Enum.FillDirection.Horizontal,
                    HorizontalAlignment = Enum.HorizontalAlignment.Right,
                    VerticalAlignment = Enum.VerticalAlignment.Center,
                    Padding = UDim.new(0, 10),
                    Name = "elementlayout",
                })
                
                -- Toggle functionality
                Library:connection(TOGGLE.MouseEnter, function()
                    Library:tween(TOGGLE_OUTLINE, {Color = Library.Colors.Accent})
                    local input = Library:connection(_uis.InputBegan, function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                            toggle.State = not toggle.State
                            options.callback(toggle.State)
                            if toggle.State then
                                Library:tween(TOGGLE, {BackgroundColor3 = Library.Colors.Accent})
                                Library:tween(TOGGLETITLE, {TextColor3 = Library.Colors.ElementActive})
                            else
                                Library:tween(TOGGLE, {BackgroundColor3 = Color3.fromRGB(20, 20, 20)})
                                Library:tween(TOGGLETITLE, {TextColor3 = Library.Colors.ElementInactive})
                            end
                            if toggle.State and options.risky then
                                Library:tween(TOGGLE, {BackgroundColor3 = Library.Colors.Accent})
                                Library:tween(TOGGLETITLE, {TextColor3 = Library.Colors.RiskyActive})
                            elseif options.risky then
                                Library:tween(TOGGLE, {BackgroundColor3 = Color3.fromRGB(20, 20, 20)})
                                Library:tween(TOGGLETITLE, {TextColor3 = Library.Colors.RiskyInactive})
                            end
                        end
                    end)
                    local leave
                    leave = Library:connection(TOGGLE.MouseLeave, function()
                        input:Disconnect()
                        leave:Disconnect()
                        Library:tween(TOGGLE_OUTLINE, {Color = Color3.fromRGB(0, 0, 0)})
                    end)
                end)
                
                -- Set initial state
                if toggle.State then
                    Library:tween(TOGGLE, {BackgroundColor3 = Library.Colors.Accent})
                    Library:tween(TOGGLETITLE, {TextColor3 = Library.Colors.ElementActive})
                else
                    Library:tween(TOGGLE, {BackgroundColor3 = Color3.fromRGB(20, 20, 20)})
                    Library:tween(TOGGLETITLE, {TextColor3 = Library.Colors.ElementInactive})
                end
                
                if toggle.State and options.risky then
                    Library:tween(TOGGLE, {BackgroundColor3 = Library.Colors.Accent})
                    Library:tween(TOGGLETITLE, {TextColor3 = Library.Colors.RiskyActive})
                elseif options.risky then
                    Library:tween(TOGGLE, {BackgroundColor3 = Color3.fromRGB(20, 20, 20)})
                    Library:tween(TOGGLETITLE, {TextColor3 = Library.Colors.RiskyInactive})
                end
                
                options.callback(toggle.State)
                
                -- Keybind functionality for toggle
                function toggle:AddKeybind(options)
                    options = Library:validate({
                        default = Enum.KeyCode.Unknown,
                        callback = function(value) end
                    }, options or {})
                
                    local keybind = {
                        Key = options.default,
                        Connection = nil
                    }
                
                    local KEYBINDTEXTBOX = Library:Create("TextBox", {
                        Parent = TOGGLECONTAINER,
                        Size = UDim2.new(0, 25, 0, 14),
                        Position = UDim2.new(1, -30, 0.5, -7),
                        BackgroundColor3 = Color3.fromRGB(25, 25, 25),
                        BorderColor3 = Library.Colors.BorderColor,
                        BackgroundTransparency = 1,
                        TextColor3 = Color3.fromRGB(255, 255, 255),
                        TextSize = 10,
                        FontFace = Library.Font,
                        Text = keybind.Key == Enum.KeyCode.Unknown and "" or keybind.Key.Name or "nil",
                        Name = "KeybindTextBox"
                    })
                
                    local KEYBINDLABEL = Library:Create("TextLabel", {
                        Parent = TOGGLECONTAINER,
                        Size = UDim2.new(0, 25, 0, 10),
                        Position = UDim2.new(1, -25, 0, -5),
                        BackgroundTransparency = 1,
                        TextColor3 = Library.Colors.ElementInactive,
                        TextSize = 8,
                        Text = "Keybind",
                        FontFace = Library.Font,
                        TextXAlignment = Enum.TextXAlignment.Center,
                        Name = "KeybindLabel"
                    })
                
                    Library:Create("UICorner", {
                        Parent = KEYBINDTEXTBOX,
                        CornerRadius = UDim.new(0, 4)
                    })
                    
                    -- Keybind methods
                    function keybind:SetKey(k)
                        if k then
                            self.Key = k
                            KEYBINDTEXTBOX.Text = k.Name
                            options.callback(k)
                        else
                            self.Key = Enum.KeyCode.Unknown
                            KEYBINDTEXTBOX.Text = ""
                            options.callback(nil)
                        end
                    end
                    
                    function keybind:GetKey()
                        return self.Key == Enum.KeyCode.Unknown and nil or self.Key
                    end
                    
                    -- Keybind functionality
                    Library:connection(KEYBINDTEXTBOX.MouseEnter, function()
                        Library:tween(KEYBINDTEXTBOX, {BorderColor3 = Library.Colors.Accent})
                        Library:tween(KEYBINDLABEL, {TextColor3 = Library.Colors.ElementActive})
                    end)
                
                    Library:connection(KEYBINDTEXTBOX.MouseLeave, function()
                        Library:tween(KEYBINDTEXTBOX, {BorderColor3 = Library.Colors.BorderColor})
                        Library:tween(KEYBINDLABEL, {TextColor3 = Library.Colors.ElementInactive})
                    end)
                
                    Library:connection(KEYBINDTEXT.Focused, function()
                        if not keybind.Connection then
                            keybind.Connection = _uis.InputBegan:Connect(function(input)
                                if input.UserInputType == Enum.UserInputType.Keyboard then
                                    keybind:SetKey(input.KeyCode)
                                    KEYBINDTEXTBOX:ReleaseFocus()
                                end
                            end)
                        end
                    end)
                
                    Library:connection(KEYBINDTEXT.FocusLost, function(enterPressed)
                        if keybind.Connection then
                            keybind.Connection:Disconnect()
                            keybind.Connection = nil
                        end
                        local text = KEYBINDTEXT.Text:upper()
                        if #text == 1 then
                            local keyCode = Enum.KeyCode[text]
                            if keyCode then
                                keybind:SetKey(keyCode)
                            else
                                keybind:SetKey(nil)
                            end
                        else
                            keybind:SetKey(nil)
                        end
                    end)
                end
                
                    options.callback(keybind:GetKey())
                
                    return keybind
                end
                
                -- Color picker functionality for toggle
                local TweenService = game:GetService("TweenService")
                function toggle:AddColorpicker(options)
                    options = Library:validate({
                        default = Color3.fromRGB(255,255,255,255),
                        getcolor = function() end,
                        gettransparency = function() end
                    }, options or {})
                
                    local ELEMENT = Library:Create("Frame", {
                        Name = "element",
                        Parent = SUBELEMENTHOLDER,
                        Size = UDim2.new(0, 22, 0, 12),
                        BorderColor3 = Library.Colors.BorderColor,
                        BorderSizePixel = 1,
                    })
                    
                    Library:Create("UIGradient", {
                        Name = "UIGradient",
                        Parent = ELEMENT,
                        Color = ColorSequence.new({
                            ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
                            ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 0, 0)),
                        }),
                        Rotation = 90
                    })
                
                    local COLORPICKER = Library:Create("Frame", {
                        Name = "colorpicker",
                        Parent = TOGGLECONTAINER,
                        Size = UDim2.new(0, 200, 0, 200),
                        Visible = false,
                        BorderColor3 = Color3.fromRGB(0, 0, 0),
                        Position = UDim2.new(0, -360, 0, -150),
                        BorderSizePixel = 2,
                        BackgroundColor3 = Library.Colors.Window,
                    })
                    
                    local BRIGHTNESS = Library:Create("Frame", {
                        Name = "brightness",
                        Parent = COLORPICKER,
                        Size = UDim2.new(1, -20, 1, -20),
                        BorderColor3 = Color3.fromRGB(0, 0, 0),
                        BorderSizePixel = 2,
                    })
                    
                    local IMAGELABEL = Library:Create("ImageLabel", {
                        Name = "ImageLabel",
                        Parent = BRIGHTNESS,
                        Size = UDim2.new(1, 0, 1, 0),
                        BorderColor3 = Color3.fromRGB(0, 0, 0),
                        BackgroundTransparency = 1,
                        BorderSizePixel = 0,
                        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                        Image = "rbxassetid://2615689005"
                    })
                    
                    local PICKER_BRIGHTNESS = Library:Create("ImageLabel", {
                        Name = "picker",
                        Parent = BRIGHTNESS,
                        Size = UDim2.new(0, 10, 0, 10),
                        BorderColor3 = Color3.fromRGB(0, 0, 0),
                        BackgroundTransparency = 1,
                        BorderSizePixel = 2,
                        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                        Image = "rbxassetid://18268646065",
                        AnchorPoint = Vector2.new(0.5, 0.5)
                    })
                    
                    local COPY = Library:Create("Frame", {
                        Parent = COLORPICKER,
                        BackgroundColor3 = Library.Colors.Window,
                        Size = UDim2.new(0.5, -1, 0, 14),
                        Position = UDim2.new(0, -6, 0, -23),
                        BorderSizePixel = 0
                    })
                    
                    local COPYTEXT = Library:Create("TextLabel", {
                        Parent = COPY,
                        Size = UDim2.new(1, 0, 1, 0),
                        BackgroundTransparency = 1,
                        TextColor3 = Color3.fromRGB(255,255,255),
                        TextSize = 9,
                        Text = "copy",
                        FontFace = Library.Font,
                        TextXAlignment = Enum.TextXAlignment.Center,
                        BorderSizePixel = 0
                    })
                    
                    local PASTE = Library:Create("Frame", {
                        Parent = COPY,
                        BackgroundColor3 = Library.Colors.Window,
                        Size = UDim2.new(0.5, -1, 0, 14),
                        Position = UDim2.new(1, 6, 0, -23),
                        AnchorPoint = Vector2.new(1, 0),
                        BorderSizePixel = 0,
                    })
                    
                    local PASTETEXT = Library:Create("TextBox", {
                        Parent = PASTE,
                        BackgroundTransparency = 1,
                        Size = UDim2.new(1, 0, 1, 0),
                        BorderSizePixel = 0,
                        Selectable = false,
                        FontFace = Library.Font,
                        TextColor3 = Color3.fromRGB(255,255,255,255),
                        TextSize = 9,
                        TextStrokeTransparency = 0,
                        TextXAlignment = Enum.TextXAlignment.Center,
                    })
                    
                    Library:Create("UIPadding", {
                        Name = "UIPadding",
                        Parent = COLORPICKER,
                        PaddingBottom = UDim.new(0, 5),
                        PaddingTop = UDim.new(0, 5),
                        PaddingLeft = UDim.new(0, 5),
                        PaddingRight = UDim.new(0, 5),
                    })
                    
                    Library:Create("UIPadding", {
                        Name = "UIPadding",
                        Parent = COLORPICKER,
                        PaddingBottom = UDim.new(0, 5),
                        PaddingTop = UDim.new(0, 5),
                        PaddingLeft = UDim.new(0, 5),
                        PaddingRight = UDim.new(0, 5),
                    })
                    
                    Library:Create("UIPadding", {
                        Name = "UIPadding",
                        Parent = COLORPICKER,
                        PaddingBottom = UDim.new(0, 5),
                        PaddingTop = UDim.new(0, 5),
                        PaddingLeft = UDim.new(0, 5),
                        PaddingRight = UDim.new(0, 5),
                    })
                    
                    Library:Create("UIPadding", {
                        Name = "UIPadding",
                        Parent = COLORPICKER,
                        PaddingBottom = UDim.new(0, 5),
                        PaddingTop = UDim.new(0, 5),
                        PaddingLeft = UDim.new(0, 5),
                        PaddingRight = UDim.new(0, 5),
                    })
                    
                    Library:Create("UIPadding", {
                        Name = "UIPadding",
                        Parent = COLORPICKER,
                        PaddingBottom = UDim.new(0, 5),
                        PaddingTop = UDim.new(0, 5),
                        PaddingLeft = UDim.new(0, 5),
                        PaddingRight = UDim.new(0, 5),
                    })
                    
                    Library:Create("UIPadding", {
                        Name = "UIPadding",
                        Parent = COLORPICKER,
                        PaddingBottom = UDim.new(0, 5),
                        PaddingTop = UDim.new(0, 5),
                        PaddingLeft = UDim.new(0, 5),
                        PaddingRight = UDim.new(0, 5),
                    })
                    
                    Library:Create("UIPadding", {
                        Name = "UIPadding",
                        Parent = COLORPICKER,
                        PaddingBottom = UDim.new(0, 5),
                        PaddingTop = UDim.new(0, 5),
                        PaddingLeft = UDim.new(0, 5),
                        PaddingRight = UDim.new(0, 5),
                    })
                    
                    Library:Create("UIPadding", {
                        Name = "UIPadding",
                        Parent = COLORPICKER,
                        PaddingBottom = UDim.new(0, 5),
                        PaddingTop = UDim.new(0, 5),
                        PaddingLeft = UDim.new(0, 5),
                        PaddingRight = UDim.new(0, 5),
                    })
                    
                    Library:Create("UIPadding", {
                        Name = "UIPadding",
                        Parent = COLORPICKER,
                        PaddingBottom = UDim.new(0, 5),
                        PaddingTop = UDim.new(0, 5),
                        PaddingLeft = UDim.new(0, 5),
                        PaddingRight = UDim.new(0, 5),
                    })
                    
                    Library:Create("UIPadding", {
                        Name = "UIPadding",
                        Parent = COLORPICKER,
                        PaddingBottom = UDim.new(0, 5),
                        PaddingTop = UDim.new(0, 5),
                        PaddingLeft = UDim.new(0, 5),
                        PaddingRight = UDim.new(0, 5),
                    })
                    
                    Library:Create("UIPadding", {
                        Name = "UIPadding",
                        Parent = COLORPICKER,
                        PaddingBottom = UDim.new(0, 5),
                        PaddingTop = UDim.new(0, 5),
                        PaddingLeft = UDim.new(0, 5),
                        PaddingRight = UDim.new(0, 5),
                    })
                    
                    local COPYTEXT = Library:Create("TextLabel", {
                        Parent = COPY,
                        Size = UDim2.new(1, 0, 1, 0),
                        BackgroundTransparency = 1,
                        TextColor3 = Color3.fromRGB(255,255,255),
                        TextSize = 9,
                        Text = "copy",
                        FontFace = Library.Font,
                        TextXAlignment = Enum.TextXAlignment.Center,
                        BorderSizePixel = 0,
                    })
                    
                    local PASTETEXT = Library:Create("TextBox", {
                        Parent = PASTE,
                        BackgroundTransparency = 1,
                        Size = UDim2.new(1, 0, 1, 0),
                        BorderSizePixel = 0,
                        Selectable = false,
                        FontFace = Library.Font,
                        TextColor3 = Color3.fromRGB(255,255,255,255),
                        TextSize = 9,
                        TextStrokeTransparency = 0,
                        TextXAlignment = Enum.TextXAlignment.Center,
                    })
                    
                    Library:Create("UIPadding", {
                        Name = "UIPadding",
                        Parent = COLORPICKER,
                        PaddingBottom = UDim.new(0, 5),
                        PaddingTop = UDim.new(0, 5),
                        PaddingLeft = UDim.new(0, 5),
                        PaddingRight = UDim.new(0, 5),
                    })
                    
                    local PASTETEXT = Library:Create("TextBox", {
                        Parent = PASTE,
                        BackgroundTransparency = 1,
                        Size = UDim2.new(1, 0, 1, 0),
                        BorderSizePixel = 0,
                        Selectable = false,
                        FontFace = Library.Font,
                        TextColor3 = Color3.fromRGB(255,255,255,255),
                        TextSize = 9,
                        TextStrokeTransparency = 0,
                        TextXAlignment = Enum.TextXAlignment.Center,
                    })
                    
                    Library:Create("UIPadding", {
                        Name = "UIPadding",
                        Parent = COLORPICKER,
                        PaddingBottom = UDim.new(0, 5),
                        PaddingTop = UDim.new(0, 5),
                        PaddingLeft = UDim.new(0, 5),
                        PaddingRight = UDim.new(0, 5),
                    })
                    
                    Library:Create("UIPadding", {
                        Name = "UIPadding",
                        Parent = COLORPICKER,
                        PaddingBottom = UDim.new(0, 5),
                        PaddingTop = UDim.new(0, 5),
                        PaddingLeft = UDim.new(0, 5),
                        PaddingRight = UDim.new(0, 5),
                    })
                    
                    Library:Create("UIPadding", {
                        Name = "UIPadding",
                        Parent = COLORPICKER,
                        PaddingBottom = UDim.new(0, 5),
                        PaddingTop = UDim.new(0, 5),
                        PaddingLeft = UDim.new(0, 5),
                        PaddingRight = UDim.new(0, 5),
                    })
                    
                    local function updateValue(value)
                        options.default = value
                        ELEMENT.BackgroundColor3 = value
                        PREVIEW.BackgroundColor3 = value
                        local r, g, b = math.round(value.r * 255), math.round(value.g * 255), math.round(value.b * 255)
                        PASTETEXT.Text = tostring(r) .. "," .. tostring(g) .. "," .. tostring(b)
                        absvalue = tostring(r) .. "," .. tostring(g) .. "," .. tostring(b)
                        options.getcolor(value)
                        
                        -- Store hue and saturation when value > 0
                        local h, s, v = Color3.toHSV(value)
                        if v > 0 then
                            lastHue = h
                            lastSaturation = s
                        end
                        
                        -- Update brightness slider position based on value
                        local brightnessPercent = v
                        PICKER_TRANSPARENCY.Position = UDim2.new(0, brightnessPercent * TRANSPARENCY.AbsoluteSize.X, 0, 0)
                        
                        -- Update hue slider position
                        local huePercent = h
                        PICKER_HUE.Position = UDim2.new(0, 0, 0, huePercent * HUE.AbsoluteSize.Y)
                    end
                    
                    local function updateBrightnessSlider(x)
                        local offsetX = x - TRANSPARENCY.AbsolutePosition.X
                        offsetX = math.clamp(offsetX, 0, TRANSPARENCY.AbsoluteSize.X)
                        local percent = offsetX / TRANSPARENCY.AbsoluteSize.X
                        PICKER_TRANSPARENCY.Position = UDim2.new(0, offsetX, 0, 0)
                        
                        -- Get current color from PREVIEW
                        local currentColor = PREVIEW.BackgroundColor3 or Color3.new(1, 1, 1)
                        local h, s, v = Color3.toHSV(currentColor)
                        -- Store original hue and saturation if value > 0
                        if v > 0 then
                            lastHue = h
                            lastSaturation = s
                        end
                        
                        -- Calculate new value from slider
                        local newValue = percent
                        
                        -- Create new color using original hue and saturation if available
                        local newColor = Color3.fromHSV(lastHue or h, lastSaturation or s, newValue)
                        
                        -- Update color
                        updateValue(newColor)
                    end
                    
                    Library:connection(TRANSPARENCY.InputBegan, function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                            updateBrightnessSlider(input.Position.X)
                            
                            local draggingConnection = Library:connection(_uis.InputChanged, function(input)
                                if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                                    updateBrightnessSlider(input.Position.X)
                                end
                            end)
                            
                            local endConnection
                            endConnection = Library:connection(_uis.InputEnded, function(input)
                                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                                    draggingConnection:Disconnect()
                                    endConnection:Disconnect()
                                end
                            end
                        end
                    end)
                    
                    Library:connection(PICKER_TRANSPARENCY.InputBegan, function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                            updateBrightnessSlider(input.Position.X)
                            
                            local draggingConnection = Library:connection(_uis.InputChanged, function(input)
                                if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                                    updateBrightnessSlider(input.Position.X)
                                end
                            end
                            
                            local endConnection
                            endConnection = Library:connection(_uis.InputEnded, function(input)
                                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                                    draggingConnection:Disconnect()
                                    endConnection:Disconnect()
                                end
                            end
                        end
                    end)
                    
                    Library:connection(PICKER_TRANSPARENCY.InputBegan, function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                            updateBrightnessSlider(input.Position.X)
                            
                            local draggingConnection = Library:connection(_uis.InputChanged, function(input)
                                if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                                    updateBrightnessSlider(input.Position.X)
                                end
                            end
                            
                            local endConnection = Library:connection(_uis.InputEnded, function(input)
                                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                                    draggingConnection:Disconnect()
                                    endConnection:Disconnect()
                                end
                            end
                        end
                    end)
                    
                    Library:connection(PICKER_TRANSPARENCY.InputBegan, function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                            updateBrightnessSlider(input.Position.X)
                        end
                    end)
                    
                    Library:connection(PICKER_TRANSPARENCY.InputChanged, function(input)
                        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                            updateBrightnessSlider(input.Position.X)
                        end
                    end
                    
                    Library:connection(PICKER_TRANSPARENCY.InputEnded, function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                            draggingConnection:Disconnect()
                            endConnection:Disconnect()
                        end
                    end)
                end
                
                -- List element
                function section:AddList(options)
                    options = Library:validate({
                        default = 1,
                        list = {"example 1", "example 2", "example 3", "example 4", "example 5", "example 6", "example 7", "example 8", "example 9", "example 10"},
                        callback = function(active) end
                    }, options or {})
                    
                    options.default = options.default or 1
                    
                    local List = {
                        CurrentChoice = nil
                    }
                    
                    local LISTCONTAINER = Library:Create("Frame", {
                        Parent = ELEMENTCONTAINER,
                        Size = UDim2.new(1, 0, 0, 100),
                        Name = options.name,
                        BorderSizePixel = 1,
                        BorderColor3 = Color3.fromRGB(255,255,255,255),
                        BackgroundTransparency = 0,
                    })
                    
                    Library:Create("UIGradient", {
                        Parent = LISTCONTAINER,
                        Color = ColorSequence.new({
                            ColorSequenceKeypoint.new(0, Color3.fromRGB(50, 50, 50),
                            ColorSequenceKeypoint.new(1, Color3.fromRGB(20, 20, 20)),
                            ColorSequenceKeypoint.new(1, Color3.fromRGB(20, 20, 20)),
                        Rotation = 90,
                    })
                    
                    local CHOICEHOLDER = Library:Create("ScrollingFrame", {
                        Parent = LISTCONTAINER,
                        Size = UDim2.new(1,0,1,0),
                        CanvasSize = UDim2.new(0,0,10,0),
                        BackgroundTransparency = 1,
                        ScrollBarThickness = 0,
                    })
                    
                    Library:Create("UIListLayout", {
                        Parent = CHOICEHOLDER,
                        FillDirection = Enum.FillDirection.Vertical,
                        HorizontalAlignment = Enum.HorizontalAlignment.Center,
                        VerticalAlignment = Enum.VerticalAlignment.Top,
                        Padding = UDim.new(0, 4),
                        SortOrder = Enum.SortOrder.LayoutOrder,
                        Name = "ListLayout"
                    })
                    
                    local TRANSPARENCYEFFECT = Library:Create("Frame",{
                        Parent = LISTCONTAINER,
                        Size = UDim2.new(1,0,1,0,0),
                        BackgroundColor3 = Color3.fromRGB(0,0,0,0),
                        BorderSizePixel = 0,
                        ZIndex = 2,
                    })
                    
                    Library:Create("UIGradient", {
                        Parent = TRANSPARENCYEFFECT,
                        Transparency = NumberSequence.new({
                            NumberSequenceKeypoint.new(0, 1),
                            NumberSequenceKeypoint.new(0.8, 0.6),
                            NumberSequenceKeypoint.new(1, 0.6),
                            NumberSequenceKeypoint.new(1, 1.0),
                        }),
                        Rotation = 90
                    })
                    
                    Library:connection(CHOICEHOLDER.MouseEnter, function()
                        List.MouseInside = true
                    end)
                    Library:connection(CHOICEHOLDER.MouseLeave, function()
                        List.MouseInside = false
                    end)
                    
                    function List:AddChoice(name)
                        local CHOICE = Library:Create("Frame", {
                            Size = UDim2.new(1,-2,0,15),
                            Parent = CHOICEHOLDER,
                            AnchorPoint = Vector2.new(0.5,0),
                            BackgroundTransparency = 1,
                            BorderSizePixel = 0,
                            ZIndex = 100,
                        })
            
                        local CHOICETEXT = Library:Create("TextLabel", {
                            Size = UDim2.new(1,0,1,0),
                            Parent = CHOICE,
                            AnchorPoint = Vector2.new(0.5,0),
                            Position = UDim2.new(0.5,0,0,0),
                            BackgroundTransparency = 1,
                            FontFace = Library.Font,
                            Text = name,
                            TextColor3 = Library.Colors.ElementInactive,
                            TextSize = 8,
                            Name = name,
                        })
                        
                        local CHOICEBAR = Library:Create("Frame", {
                            Parent = CHOICE,
                            Size = UDim2.new(0,0,0,1),
                            AnchorPoint = Vector2.new(0.5,0.5),
                            Position = UDim2.new(0.5,0,0.5,5),
                            BackgroundTransparency = 0.5,
                            BackgroundColor3 = Library.Colors.Accent,
                            BorderSizePixel = 0,
                            Name = "SubTabBar"
                        })
                        
                        -- Choice functionality
                        local choice = {
                            Name = name,
                            Hover = false,
                            Active = false,
                        }
                        
                        if List.CurrentChoice == choice.Name then 
                            choice.Active = true 
                        end
                        
                        Library:connection(CHOICE.MouseEnter, function()
                            if List.CurrentChoice ~= choice.Name then
                                Library:tween(CHOICETEXT, {TextColor3 = Library.Colors.Accent})
                                Library:tween(CHOICEBAR, {Size = UDim2.new(0,35,0,1)})
                            end
                            choice.Hover = true
                        end)
                        
                        Library:connection(_uis.InputBegan, function(input)
                            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                                if choice.Hover then
                                    List.CurrentChoice = choice.Name
                                    Library:tween(CHOICETEXT, {TextColor3 = Library.Colors.ElementActive})
                                    Library:tween(CHOICEBAR, {Size = UDim2.new(0,35,0,1)})
                                    options.callback(choice.Name)
                                end
                            end
                        end)
                        
                        Library:connection(_uis.InputEnded, function(input)
                            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                                if choice.Hover then
                                    Library:tween(CHOICETEXT, {TextColor3 = Library.Colors.ElementActive})
                                    Library:tween(CHOICEBAR, {Size = UDim2.new(0,35,0,1)})
                                end
                            end
                        end)
                    end
                    
                    -- Add default choices
                    for _,v in pairs(options.list) do
                        List:AddChoice(v)
                    end
                    
                    return List
                end
                
                return section
            end
            
            return tab
        end
        
        return menu
    end
    
    -- Developer tools
    do
        -- Open / Close functionality
        _uis.MouseIconEnabled = false
        Library:connection(_uis.InputBegan, function(input)
            if input.KeyCode == Library.Ui_Bind then
                SCREENGUI.Enabled = not SCREENGUI.Enabled
                _uis.MouseIconEnabled = not SCREENGUI.Enabled
            end
        end)
        
        -- Destroy functionality
        Library:connection(_uis.InputBegan, function(input)
            if input.KeyCode == Enum.KeyCode.Delete then
                Library:unload()
            end
        end)
    end
    
    -- Custom mouse cursor
    do
        local CURSOR = Library:Create("ImageLabel", {
            Size = UDim2.new(0, 18, 0, 18),
            BackgroundTransparency = 1,
            ImageColor3 = Library.Colors.Accent,
            Image = "rbxassetid://17404277477",
            ZIndex = 100,
            Parent = SCREENGUI,
        })
        
        Library:connection(_runservice.RenderStepped, function() 
            CURSOR.Position = UDim2.new(0, mouse.X -6, 0, mouse.Y - 2) 
        end)
    end
    
    -- Window dragging functionality
    do
        local dragging = false
        local dragInput
        local dragStartPos
        local startPos
    
        local function updateInput(input)
            local delta = input.Position - dragStartPos
            local newX = startPos.X.Offset + delta.X
            local newY = startPos.Y.Offset + delta.Y
            WINDOW.Position = UDim2.new(startPos.Scale, newX, startPos.Y.Scale, newY)
        end
    
        Library:connection(INNERCONTAINER.InputBegan, function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                if not _G.isDraggingSlider then
                    dragging = true
                    dragInput = input
                    dragStartPos = input.Position
                    startPos = WINDOW.Position
                end
            end
        end)
    
    Library:connection(_uis.InputChanged, function(input)
            if dragging and input == dragInput and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                updateInput(input)
            end
        end)
    
        Library:connection(_uis.InputEnded, function(input)
            if input == dragInput and (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then
                dragging = false
                dragInput = nil
            end
        end)
    end
    
    return menu
end 
return ab.AddWindow()
