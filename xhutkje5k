game = cloneref(game)
local Workspace = game:GetService("Workspace") 
local function gs(service) return game:GetService(service) end
local _tweenservice, _runservice, _coregui, _uis, _http, _cas = gs("TweenService"), gs("RunService"), gs("CoreGui"), gs("UserInputService"), gs("HttpService"), gs("ContextActionService")
local mouse = gs("Players").LocalPlayer:GetMouse()
local ab = {}
local Library = {
    Ui_Bind = Enum.KeyCode.RightShift,
    Colors = {
        Window = Color3.fromRGB(9, 9, 9),
        BorderColor = Color3.fromRGB(40, 40, 40),
        Accent = Color3.fromRGB(139, 158, 252),
        TopBar = Color3.fromRGB(9, 9, 9),
        TopText = Color3.fromRGB(100,100,100),
        TabContainer = Color3.fromRGB(9, 9, 9),
        TabActive = Color3.fromRGB(200, 200, 200),
        TabInactive = Color3.fromRGB(100, 100, 100),
        ContentContainer = Color3.fromRGB(9, 9, 9),
        Section = Color3.fromRGB(9, 9, 9),
        SectionText = Color3.fromRGB(150,150,150),
        RiskyActive = Color3.fromRGB(200, 0, 0),
        RiskyInactive = Color3.fromRGB(100, 0, 0),
        ElementActive = Color3.fromRGB(125, 125, 125),
        ElementInactive = Color3.fromRGB(80, 80, 80),
    },
    Instances = {},
    Connections = {},
    Font = nil,
}

function Library:Register_Font(Name, Weight, Style, Asset)
    if not isfile(Asset.Id) then writefile(Asset.Id, Asset.Font) end
    if isfile(Name .. ".font") then delfile(Name .. ".font") end
    local Data = {
        name = Name,
        faces = {
            {
                name = "Regular",
                weight = Weight,
                style = Style,
                assetId = getcustomasset(Asset.Id),
            },
        },
    }
    writefile(Name .. ".font", _http:JSONEncode(Data))
    return getcustomasset(Name .. ".font")
end

function Library:Create(Class, Properties, Secure)
    local _Instance
    if Secure then
        _Instance = cloneref(Instance.new(Class))
    else 
        _Instance = type(Class) == 'string' and Instance.new(Class) or Class 
    end
    for Property, Value in next, Properties do
        _Instance[Property] = Value
    end
    table.insert(self.Instances, _Instance)
    return _Instance
end

function Library:validate(defaults, options)
    for i,v in pairs(defaults) do
        if options[i] == nil then
            options[i] = v
        end
    end
    return options
end

function Library:connection(signal, callback, tbl)
    local connection = signal:Connect(callback)
    table.insert(self.Connections, connection)
    if tbl then table.insert(tbl, connection) end
    return connection
end

function Library:unload()
    for _,v in next, self.Instances do 
        if v and v.Parent then 
            v:Destroy() 
        end 
    end
    for _,v in next, self.Connections do 
        if v then 
            v:Disconnect() 
        end 
    end
end

function Library:tween(object, goal, callback)
    local tween = _tweenservice:Create(object, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), goal)
    if callback then
        self:connection(tween.Completed, callback)
    end
    tween:Play()
end

local SCREENGUI
local dropdownindex = 50

ab.AddWindow = function (options)
    local options = options or {}
    options = Library:validate({
        name = string.format('<font color="rgb(%d, %d, %d)">Funny.KM</font> | @Kdyriz', Library.Colors.Accent.R * 255, Library.Colors.Accent.G * 255, Library.Colors.Accent.B * 255),
        size = UDim2.new(0, 625, 0, 400),
        WaterMark = {
            Enabled = true, 
            TextSize = 9,
        },
    }, options or {})
    
    local menu = {CurrentTab = nil}
    
    SCREENGUI = Library:Create("ScreenGui", {
        Parent = _coregui,
        ZIndexBehavior = Enum.ZIndexBehavior.Global,
        Name = options.name,
        Enabled = true
    }, true)
    
    local WINDOW = Library:Create("Frame", {
        Parent = SCREENGUI,
        Size = options.size,
        AnchorPoint = Vector2.new("0.5","0.5"),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        BackgroundColor3 = Library.Colors.Window,
        BorderSizePixel = 0,
        Name = "Window",
        Visible = true,
        ClipsDescendants = true
    })

    local WATERMARK_FRAME = Library:Create("Frame", {
        Name = "WatermarkFrame",
        Parent = SCREENGUI,
        AutomaticSize = Enum.AutomaticSize.XY,
        Position = UDim2.new(0, 5, 0, 5),
        AnchorPoint = Vector2.new(0, 0),
        BackgroundColor3 = Library.Colors.Window,
        BackgroundTransparency = 0.4,
        Visible = options.WaterMark.Enabled,
        ZIndex = 101,
    })

    Library:Create("UIPadding", {
        Parent = WATERMARK_FRAME,
        PaddingBottom = UDim.new(0, 3),
        PaddingLeft = UDim.new(0, 5),
        PaddingRight = UDim.new(0, 5),
        PaddingTop = UDim.new(0, 3),
    })
    
    local WATERMARK_TEXT = Library:Create("TextButton", {
        Name = "WatermarkText",
        Parent = WATERMARK_FRAME,
        BackgroundTransparency = 1,
        AutomaticSize = Enum.AutomaticSize.XY,
        FontFace = Library.Font,
        TextSize = options.WaterMark.TextSize,
        RichText = true,
        TextColor3 = Library.Colors.TopText,
        Text = "Loading...",
        AutoButtonColor = false
    })
    
    Library:connection(WATERMARK_TEXT.MouseButton1Click, function()
        WINDOW.Visible = not WINDOW.Visible
    end)
    Library:connection(WATERMARK_TEXT.MouseEnter, function() Library:tween(WATERMARK_TEXT, { TextColor3 = Library.Colors.TabActive }) end)
    Library:connection(WATERMARK_TEXT.MouseLeave, function() Library:tween(WATERMARK_TEXT, { TextColor3 = Library.Colors.TopText }) end)


    local WINDOW_OUTLINE = Library:Create("Frame", {
        Parent = WINDOW,
        Size = UDim2.new(1,0,1,0),
        AnchorPoint = Vector2.new("0.5","0.5"),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        BackgroundTransparency = 1,
        Name = "Outline",
    })
    
    Library:Create("UIStroke", { 
        Parent = WINDOW_OUTLINE,
        Color = Library.Colors.BorderColor,
        Thickness = 1,
        LineJoinMode = Enum.LineJoinMode.Miter,
    })
    
    local TOPBAR = Library:Create("Frame", {
        Parent = WINDOW,
        BackgroundColor3 = Library.Colors.TopBar,
        BorderSizePixel = 0,
        Size = UDim2.new(1, -6, 0, 18),
        Position = UDim2.new(0,3,0,3),
        Name = "Topbar"
    })
    
    Library:Create("Frame", { 
        Parent = TOPBAR,
        BackgroundColor3 = Library.Colors.Accent,
        BorderSizePixel = 0,
        Size = UDim2.new(1,4,0,1),
        Position = UDim2.new(0.5,0,1,1),
        AnchorPoint = Vector2.new(0.5,1),
    })
    
    local TOP_OVERLAY = Library:Create("Frame", {
        Parent = TOPBAR,
        BackgroundColor3 = Library.Colors.Accent,
        BorderSizePixel = 0,
        Size = UDim2.new(1,4,1,0),
        Position = UDim2.new(0.5,0,1,2),
        AnchorPoint = Vector2.new(0.5,1),
        ZIndex = 2
    })
    
    Library:Create("UIGradient", { 
        Parent = TOP_OVERLAY,
        Transparency = NumberSequence.new({
            NumberSequenceKeypoint.new(0, 1),
            NumberSequenceKeypoint.new(0.8, 0.7),
            NumberSequenceKeypoint.new(1, 1.0),
        }),
        Rotation = 90
    })
    
    Library:Create("TextLabel", { 
        Parent = TOPBAR,
        Size = UDim2.new(1, 0, 1, 0),
        Position = UDim2.new(0,6,0,0),
        TextColor3 = Library.Colors.TopText,
        BackgroundTransparency = 1,
        TextSize = 9,
        RichText = true,
        Text = options.name,
        FontFace = Library.Font,
        TextXAlignment = Enum.TextXAlignment.Left,
        Name = "Title"
    })
    
    local TABCONTAINER = Library:Create("Frame", {
        Parent = WINDOW,
        BackgroundTransparency = 1,
        Size = UDim2.new(0,120,1,-35),
        Position = UDim2.new(0,10,0.5,10),
        AnchorPoint = Vector2.new(0,0.5),
        Name = "TabContainer"
    })
    
    Library:Create("UIPadding", { 
        Parent = TABCONTAINER,
        PaddingTop = UDim.new(0, 10),
    })
    
    Library:Create("UIListLayout", { 
        Parent = TABCONTAINER,
        SortOrder = Enum.SortOrder.LayoutOrder,
        FillDirection = Enum.FillDirection.Vertical,
        Padding = UDim.new(0, 8),
    })
    
    Library:Create("UIStroke", { 
        Parent = TABCONTAINER,
        Color = Library.Colors.BorderColor,
    })
    
    local INNERCONTAINER = Library:Create("Frame", {
        Parent = WINDOW,
        Size = UDim2.new(1, -150, 1, -35),
        Position = UDim2.new(0, 140, 0, 28),
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Name = "InnerContainer",
    })

    Library:Create("UIStroke", { 
        Parent = INNERCONTAINER,
        Color = Library.Colors.BorderColor,
        LineJoinMode = Enum.LineJoinMode.Miter,
    })

    local function deactivate_tab(tab_object)
        for _, content in ipairs(INNERCONTAINER:GetChildren()) do
            if content.Name == tab_object.Name and content:IsA("GuiObject") then
                content.Visible = false
            end
        end
        local TabText = tab_object:FindFirstChild("TabText")
        local TabBar = tab_object:FindFirstChild("TabBar")
        local TabOverlay = tab_object:FindFirstChild("TabOverlay")

        if TabText then Library:tween(TabText, {Position = UDim2.new(0,12,0.5,0), TextColor3 = Library.Colors.TabInactive}) end
        if TabBar then Library:tween(TabBar, {Position = UDim2.new(0,0,0.5,0), BackgroundTransparency = 1}) end
        if TabOverlay then Library:tween(TabOverlay, {Position = UDim2.new(0,0,0,0), BackgroundTransparency = 1}) end
    end
    
    local watermarkStartTime = os.clock()
    local lastFpsUpdateTime, fps, lastPing, lastServerTime = 0, 0, 0, 0

    local Triggers = {}
    local function UpdateWatermarkTriggers()
        local AccentColor = Library.Colors.Accent
        local elapsed = os.clock() - watermarkStartTime
        local mins = math.floor(elapsed / 60)
        local secs = math.floor(elapsed % 60)

        Triggers = {
            ['{user}'] = gs("Players").LocalPlayer.Name,
            ['{ServerTime}'] = tostring(lastServerTime),
            ['{name}'] = ('<font color="rgb(%s, %s, %s)">Funny.KM</font>'):format(
                math.floor(AccentColor.R * 255), math.floor(AccentColor.G * 255), math.floor(AccentColor.B * 255)
            ),
            ['{hour}'] = os.date("%H"), ['{minute}'] = os.date("%M"), ['{second}'] = os.date("%S"),
            ['{time}'] = os.date("%X"), ['{date}'] = os.date("%x"),
            ['{fps}'] = tostring(fps),
            ['{ping}'] = tostring(lastPing),
            ['{usage}'] = string.format("%02d:%02d", mins, secs),
        }
    end

    function Library:WatermarkTextTriggers(text)
        for key, value in pairs(Triggers) do
            text = text:gsub(key, value, 1)
        end
        return text
    end
 
    local watermarkContent = "{name} | {user} | {usage} | {ping}ms | {fps} FPS"
    local watermarkUpdateRate = 0.5
    local lastWatermarkUpdate = 0
    
    function Library:SetWatermarkContent(newText) watermarkContent = newText end
    function Library:SetWatermarkUpdateRate(rate) watermarkUpdateRate = rate end
    function Library:ToggleWatermark(visible) WATERMARK_FRAME.Visible = visible end
    
    Library:connection(_runservice.RenderStepped, function(deltaTime)
        local now = os.clock()
        if now - lastFpsUpdateTime >= 0.2 then
             fps = math.floor(1 / deltaTime)
             lastFpsUpdateTime = now
        end
        if now - lastWatermarkUpdate >= watermarkUpdateRate then
            if gs("Stats"):FindFirstChild("Network") and gs("Stats").Network:FindFirstChild("ServerStatsItem") and gs("Stats").Network.ServerStatsItem:FindFirstChild("Data Ping") then
                lastPing = math.floor(gs("Stats").Network.ServerStatsItem["Data Ping"]:GetValue())
            end
            lastServerTime = math.floor(Workspace:GetServerTimeNow())
            UpdateWatermarkTriggers()
            WATERMARK_TEXT.Text = Library:WatermarkTextTriggers(watermarkContent)
            lastWatermarkUpdate = now
        end
    end)
    
    function menu:AddTab(options)
        options = Library:validate({ name = "example" }, options or {})
        
        local tab = {}
        
        local TAB = Library:Create("Frame", {
            Parent = TABCONTAINER,
            BackgroundTransparency = 1,
            Size = UDim2.new(1,0,0,15),
            Name = options.name
        })
        
        local TAB_OVERLAY = Library:Create("Frame", {
            Parent = TAB, Size = UDim2.new(1,0,1,0), BackgroundTransparency = 1,
            BackgroundColor3 = Library.Colors.Accent, Name = "TabOverlay"
        })
        
        Library:Create("UIGradient", { 
            Parent = TAB_OVERLAY,
            Transparency = NumberSequence.new({NumberSequenceKeypoint.new(0, 0.8), NumberSequenceKeypoint.new(0.4, 1), NumberSequenceKeypoint.new(1, 1),}),
        })
        
        local TABBAR = Library:Create("Frame", {
            Parent = TAB, BackgroundColor3 = Library.Colors.Accent, BackgroundTransparency = 1,
            Size = UDim2.new(0,1,1,0), Position = UDim2.new(0,0,0.5,0), AnchorPoint = Vector2.new(0,0.5), Name = "TabBar"
        })
        
        local TABTEXT = Library:Create("TextLabel", {
            Parent = TAB, BackgroundTransparency = 1, Size = UDim2.new(1,-12,1,0),
            Position = UDim2.new(0,12,0.5,0), AnchorPoint = Vector2.new(0,0.5),
            TextColor3 = Library.Colors.TabInactive, FontFace = Library.Font, TextSize = 9,
            TextXAlignment = Enum.TextXAlignment.Left, Text = options.name, Name = "TabText"
        })
        
        local CONTENTCONTAINER = Library:Create("Frame", {
            Parent = INNERCONTAINER, Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1, Visible = false, Name = options.name
        })

        local function create_container(parent, name, anchor, pos)
            local container = Library:Create("ScrollingFrame", {
                Parent = parent,
                Size = UDim2.new(0.5, -6, 1, 0),
                AnchorPoint = anchor,
                Position = pos,
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                Name = name,
                CanvasSize = UDim2.new(0, 0, 0, 0),
                ScrollBarThickness = 3,
                ScrollBarImageColor3 = Library.Colors.Accent,
                ScrollingDirection = Enum.ScrollingDirection.Y,
                AutomaticCanvasSize = Enum.AutomaticSize.Y,
            })
            Library:Create("UIPadding", { Parent = container, PaddingTop = UDim.new(0,10), PaddingBottom = UDim.new(0,10), PaddingLeft = UDim.new(0,5), PaddingRight = UDim.new(0,5) })
            Library:Create("UIListLayout", { Parent = container, SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0, 8) })
            return container
        end
        
        local LEFTCONTAINER = create_container(CONTENTCONTAINER, "LeftContainer", Vector2.new(0,0), UDim2.new(0,0,0,0))
        local RIGHTCONTAINER = create_container(CONTENTCONTAINER, "RightContainer", Vector2.new(1,0), UDim2.new(1,0,0,0))

        tab.CONTENTCONTAINER, tab.LEFTCONTAINER, tab.RIGHTCONTAINER = CONTENTCONTAINER, LEFTCONTAINER, RIGHTCONTAINER
        
        local function activate()
            CONTENTCONTAINER.Visible = true
            Library:tween(TABTEXT, {Position = UDim2.new(0,18,0.5,0), TextColor3 = Library.Colors.TabActive})
            Library:tween(TABBAR, {Position = UDim2.new(0,6,0.5,0), BackgroundTransparency = 0})
            Library:tween(TAB_OVERLAY, {Position = UDim2.new(0,6,0,0), BackgroundTransparency = 0})
            menu.CurrentTab = TAB
        end
        
        local function switchTab()
            for _, child in pairs(TABCONTAINER:GetChildren()) do
                if child:IsA("Frame") and child.Name ~= TAB.Name then
                    deactivate_tab(child)
                end
            end
            activate()
        end
        
        Library:connection(TAB.MouseEnter, function() if menu.CurrentTab ~= TAB then Library:tween(TABTEXT, {TextColor3 = Library.Colors.TabActive}) end end)
        Library:connection(TAB.MouseLeave, function() if menu.CurrentTab ~= TAB then Library:tween(TABTEXT, {TextColor3 = Library.Colors.TabInactive}) end end)
        Library:connection(TAB.MouseButton1Click, switchTab)
        
        if menu.CurrentTab == nil then switchTab() end
        
        local SUBTABCONTAINER
        getgenv().subtab = false
        
        function tab:AddTab(suboptions)
            suboptions = Library:validate({name = "preview"}, suboptions or {})
            
            local subtab = {CurrentTab = nil, isSubTab = true}
            getgenv().subtab = true
            
            if not CONTENTCONTAINER:FindFirstChild("SubTabContainer") then
                LEFTCONTAINER.Position, RIGHTCONTAINER.Position = UDim2.new(0,0,0,25), UDim2.new(1,0,0,25)
                LEFTCONTAINER.Size, RIGHTCONTAINER.Size = UDim2.new(0.5,-6,1,-25), UDim2.new(0.5,-6,1,-25)
                SUBTABCONTAINER = Library:Create("Frame", {
                    Parent = CONTENTCONTAINER, Size = UDim2.new(1,0,0,20), Name = "SubTabContainer"
                })
        
                Library:Create("UIListLayout", {
                    Parent = SUBTABCONTAINER, FillDirection = Enum.FillDirection.Horizontal,
                    VerticalAlignment = Enum.VerticalAlignment.Center, SortOrder = Enum.SortOrder.LayoutOrder,
                })
                
                Library:Create("UIStroke", { Parent = SUBTABCONTAINER, Color = Library.Colors.BorderColor })
            end
        
            local SUBTAB = Library:Create("TextButton", {
                Parent = SUBTABCONTAINER, BackgroundTransparency = 1, Text = "",
                Size = UDim2.fromScale(1 / (#SUBTABCONTAINER:GetChildren() + 1), 1), Name = suboptions.name
            })
            for _, v in ipairs(SUBTABCONTAINER:GetChildren()) do if v:IsA("TextButton") then v.Size = UDim2.fromScale(1 / #SUBTABCONTAINER:GetChildren(), 1) end end
            
            local SUBTABTEXT = Library:Create("TextLabel", { 
                Parent = SUBTAB, BackgroundTransparency = 1, TextColor3 = Library.Colors.TabInactive, FontFace = Library.Font,
                TextSize = 9, Size = UDim2.new(1,0,1,0), Text = suboptions.name, Name = "SubTabText"
            })
        
            local SUBTABBAR = Library:Create("Frame", {
                Parent = SUBTAB, BackgroundColor3 = Library.Colors.Accent, BackgroundTransparency = 1,
                AnchorPoint = Vector2.new(0.5,1), Position = UDim2.new(0.5,0,1,2), Size = UDim2.new(1,0,0,1), Name = "SubTabBar"
            })
            
            subtab.LEFTCONTAINER = create_container(CONTENTCONTAINER, "LeftSub_"..suboptions.name, Vector2.new(0,0), UDim2.new(0,0,0,25))
            subtab.RIGHTCONTAINER = create_container(CONTENTCONTAINER, "RightSub_"..suboptions.name, Vector2.new(1,0), UDim2.new(1,0,0,25))
            subtab.LEFTCONTAINER.Visible, subtab.RIGHTCONTAINER.Visible = false, false

            local function activate_sub()
                LEFTCONTAINER.Visible, RIGHTCONTAINER.Visible = false, false
                for _, child in ipairs(CONTENTCONTAINER:GetChildren()) do
                    if child:IsA("ScrollingFrame") and (child.Name:find("LeftSub_") or child.Name:find("RightSub_")) then child.Visible = false end
                end
                subtab.LEFTCONTAINER.Visible, subtab.RIGHTCONTAINER.Visible = true, true
                Library:tween(SUBTABTEXT, {TextColor3 = Library.Colors.TabActive})
                Library:tween(SUBTABBAR, {BackgroundTransparency = 0})
                subtab.CurrentTab = SUBTAB
            end

            local function deactivate_sub(sub_instance)
                 for _, child in ipairs(CONTENTCONTAINER:GetChildren()) do
                    if child:IsA("ScrollingFrame") and child.Name:find(sub_instance.Name) then child.Visible = false end
                end
                local text = sub_instance:FindFirstChild("SubTabText")
                local bar = sub_instance:FindFirstChild("SubTabBar")
                if text then Library:tween(text, {TextColor3 = Library.Colors.TabInactive}) end
                if bar then Library:tween(bar, {BackgroundTransparency = 1}) end
            end

            local function switchSubTab()
                for _, other in ipairs(SUBTABCONTAINER:GetChildren()) do
                    if other:IsA("TextButton") and other.Name ~= SUBTAB.Name then deactivate_sub(other) end
                end
                activate_sub()
            end
        
            Library:connection(SUBTAB.MouseEnter, function() if subtab.CurrentTab ~= SUBTAB then Library:tween(SUBTABTEXT, {TextColor3 = Library.Colors.TabActive}) end end)
            Library:connection(SUBTAB.MouseLeave, function() if subtab.CurrentTab ~= SUBTAB then Library:tween(SUBTABTEXT, {TextColor3 = Library.Colors.TabInactive}) end end)
            Library:connection(SUBTAB.MouseButton1Click, switchSubTab)
    
            if #SUBTABCONTAINER:GetChildren() == 1 then switchSubTab() end

            subtab.AddSection = tab.AddSection
            return subtab
        end
        
        function tab:AddSection(options)
            options = Library:validate({ name = "preview", side = "Left", height = 150}, options or {})
            
            local section = { Hover = false }
            
            local parentContainer = options.side == "Right" and (self.RIGHTCONTAINER or RIGHTCONTAINER) or (self.LEFTCONTAINER or LEFTCONTAINER)

            local SECTION = Library:Create("Frame", {
                Parent = parentContainer,
                BackgroundColor3 = Library.Colors.Section,
                Name = options.name,
                BorderSizePixel = 0,
            })

            if options.height == "auto" then
                SECTION.AutomaticSize = Enum.AutomaticSize.Y
                SECTION.Size = UDim2.new(1, -10, 0, 0)
            else
                SECTION.Size = UDim2.new(1, -10, 0, tonumber(options.height) or 150)
            end
            
            Library:Create("UIStroke", {Parent = SECTION, Color = Library.Colors.BorderColor})

            Library:Create("TextLabel", {
                Parent = SECTION, Position = UDim2.new(0, 10, 0, 0), Size = UDim2.new(1,-20,0,18), BackgroundTransparency = 1,
                TextColor3 = Library.Colors.SectionText, TextSize = 9, FontFace = Library.Font,
                Text = options.name, Name = "SectionText", TextXAlignment = Enum.TextXAlignment.Left,
            })

            local ELEMENTCONTAINER = Library:Create("ScrollingFrame", {
                Parent = SECTION, Size = UDim2.new(1, 0, 1, -20), Position = UDim2.new(0, 0, 0, 20),
                BackgroundTransparency = 1, Name = "ElementContainer", BorderSizePixel = 0,
                CanvasSize = UDim2.new(0,0,0,0), AutomaticCanvasSize = Enum.AutomaticSize.Y,
                ScrollBarThickness = 3, ScrollBarImageColor3 = Library.Colors.Accent
            })

            Library:Create("UIListLayout", { Parent = ELEMENTCONTAINER, SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0, 8) })
            Library:Create("UIPadding", { Parent = ELEMENTCONTAINER, PaddingLeft = UDim.new(0,10), PaddingRight = UDim.new(0,10), PaddingTop = UDim.new(0,5), PaddingBottom = UDim.new(0,5) })

            function section:AddButton(btn_options)
                btn_options = Library:validate({name = "button", callback = function() end,}, btn_options or {})
                
                local BUTTON = Library:Create("TextButton", {
                    Parent = ELEMENTCONTAINER, Size = UDim2.new(1, 0, 0, 18), Text = "", AutoButtonColor = false,
                    Name = btn_options.name, BackgroundColor3 = Library.Colors.ElementInactive, BorderSizePixel = 0
                })
                
                Library:Create("UIStroke", {Parent=BUTTON, Color = Library.Colors.BorderColor})

                local BUTTONTITLE = Library:Create("TextLabel", {
                    Parent = BUTTON, Size = UDim2.new(1, 0, 1, 0), BackgroundTransparency = 1,
                    TextColor3 = Library.Colors.TabInactive, TextSize = 9, Text = btn_options.name, FontFace = Library.Font
                })
                
                Library:connection(BUTTON.MouseEnter, function() Library:tween(BUTTON, {BackgroundColor3 = Library.Colors.ElementActive}) end)
                Library:connection(BUTTON.MouseLeave, function() Library:tween(BUTTON, {BackgroundColor3 = Library.Colors.ElementInactive}) end)
                Library:connection(BUTTON.MouseButton1Click, btn_options.callback)
                return
            end

            function section:AddTextbox(txt_options)
                txt_options = Library:validate({name = "textbox", default = "Test", callback = function() end,}, txt_options or {})
                
                local BOX = Library:Create("TextBox", {
                    Parent = ELEMENTCONTAINER, Name = txt_options.name, BackgroundColor3 = Library.Colors.ElementInactive,
                    BorderSizePixel = 0, Size = UDim2.new(1, 0, 0, 18), FontFace = Library.Font,
                    Text = txt_options.default, TextColor3 = Library.Colors.TabInactive, TextSize = 9
                })

                Library:Create("UIStroke", {Parent = BOX, Color = Library.Colors.BorderColor})

                Library:connection(BOX.FocusGained, function() Library:tween(BOX, {BackgroundColor3 = Library.Colors.ElementActive}) end)
                Library:connection(BOX.FocusLost, function(enter) 
                    Library:tween(BOX, {BackgroundColor3 = Library.Colors.ElementInactive})
                    if enter then txt_options.callback(BOX.Text) end
                end)
                return
            end
            
            function section:AddToggle(tgl_options)
                tgl_options = Library:validate({name = "toggle", default = false, risky = false, callback = function() end,}, tgl_options or {})
                
                local toggle = { State = tgl_options.default }
                
                local TOGGLE_HOLDER = Library:Create("Frame", { Size = UDim2.new(1,0,0,15), Parent = ELEMENTCONTAINER, BackgroundTransparency = 1, Name = "ToggleHolder"})
                
                local TOGGLE_BTN = Library:Create("TextButton", {
                    Parent = TOGGLE_HOLDER, Size = UDim2.new(0,10,0,10), Text = "", AutoButtonColor = false,
                    BackgroundColor3 = Color3.fromRGB(20, 20, 20), AnchorPoint = Vector2.new(0, 0.5),
                    Position = UDim2.new(0, 0, 0.5, 0), Name = "Toggle"
                })
                Library:Create("UIStroke", {Thickness = 1, Color = Library.Colors.BorderColor, Parent = TOGGLE_BTN})
                
                local TOGGLETITLE = Library:Create("TextLabel", {
                    Parent = TOGGLE_HOLDER, AnchorPoint = Vector2.new(0, 0.5), Position = UDim2.new(0, 18, 0.5, 0),
                    BackgroundTransparency = 1, TextSize = 9, Text = tgl_options.name, FontFace = Library.Font,
                    TextXAlignment = Enum.TextXAlignment.Left, Name = "ToggleTitle", Size = UDim2.new(1,-60,1,0),
                })
                
                local SUBELEMENTHOLDER = Library:Create("Frame", {
                    Parent = TOGGLE_HOLDER, Size = UDim2.new(0,60,1,0), Position = UDim2.new(1,-60,0,0), BackgroundTransparency = 1, Name = "elementholder",
                })
                Library:Create("UIListLayout", { Parent = SUBELEMENTHOLDER, FillDirection = Enum.FillDirection.Horizontal, HorizontalAlignment = Enum.HorizontalAlignment.Right, VerticalAlignment = Enum.VerticalAlignment.Center, Padding = UDim.new(0, 5)})
                
                local function update_visuals()
                    local active_color = tgl_options.risky and Library.Colors.RiskyActive or Library.Colors.TabActive
                    local inactive_color = tgl_options.risky and Library.Colors.RiskyInactive or Library.Colors.TabInactive
                    local bg_color = toggle.State and Library.Colors.Accent or Library.Colors.ElementInactive
                    local text_color = toggle.State and active_color or inactive_color
                    Library:tween(TOGGLE_BTN, {BackgroundColor3 = bg_color})
                    Library:tween(TOGGLETITLE, {TextColor3 = text_color})
                end
                
                Library:connection(TOGGLE_BTN.MouseButton1Click, function()
                    toggle.State = not toggle.State
                    tgl_options.callback(toggle.State)
                    update_visuals()
                end)
                update_visuals()
                
                function toggle:AddKeybind(key_options)
                    key_options = Library:validate({ default = Enum.KeyCode.Unknown, callback = function() end}, key_options or {})
                
                    local keybind = { Key = key_options.default }
                
                    local KEYBIND_BTN = Library:Create("TextButton", {
                        Parent = SUBELEMENTHOLDER, Size = UDim2.new(0, 25, 0, 14), Text = "", BackgroundColor3 = Library.Colors.ElementInactive
                    })
                    Library:Create("UIStroke", {Parent = KEYBIND_BTN, Color = Library.Colors.BorderColor})
                    Library:Create("UICorner", { Parent = KEYBIND_BTN, CornerRadius = UDim.new(0, 2)})

                    local KEYBIND_LABEL = Library:Create("TextLabel", {
                        Parent = KEYBIND_BTN, Size=UDim2.fromScale(1,1), BackgroundTransparency=1, TextColor3=Library.Colors.TabInactive,
                        TextSize=9, FontFace=Library.Font, Text = keybind.Key == Enum.KeyCode.Unknown and "..." or keybind.Key.Name
                    })
                
                    Library:connection(KEYBIND_BTN.MouseButton1Click, function()
                        KEYBIND_LABEL.Text = "..."
                        local input_conn
                        input_conn = Library:connection(_uis.InputBegan, function(input, gp)
                            if gp then return end
                            if input.UserInputType == Enum.UserInputType.Keyboard then
                                if input.KeyCode == Enum.KeyCode.Escape then keybind.Key = Enum.KeyCode.Unknown
                                else keybind.Key = input.KeyCode end
                                KEYBIND_LABEL.Text = keybind.Key == Enum.KeyCode.Unknown and "..." or keybind.Key.Name
                                key_options.callback(keybind.Key)
                                input_conn:Disconnect()
                            end
                        end)
                    end)

                    Library:connection(_uis.InputBegan, function(input, gp)
                        if not gp and keybind.Key ~= Enum.KeyCode.Unknown and input.KeyCode == keybind.Key then
                           TOGGLE_BTN.MouseButton1Click:Fire()
                        end
                    end)
                end
                
                function toggle:AddColorpicker(color_options)
                    color_options = Library:validate({default = Color3.fromRGB(255,255,255), callback = function() end,}, color_options or {})

                    local colorpicker_state = { color = color_options.default, open = false }

                    local PREVIEW = Library:Create("TextButton", {
                        Parent = SUBELEMENTHOLDER, Size = UDim2.new(0, 22, 0, 12), BackgroundColor3 = colorpicker_state.color, Text = ""
                    })
                    Library:Create("UIStroke", { Parent = PREVIEW, Color = Library.Colors.BorderColor })

                    local PICKER_FRAME = Library:Create("Frame", {
                        Parent = SCREENGUI, Size = UDim2.new(0,170,0,150), BackgroundColor3=Library.Colors.Window,
                        Position = UDim2.new(0.5,0,0.5,0), AnchorPoint=Vector2.new(0.5,0.5), Visible=false, ZIndex = 99
                    })
                    Library:Create("UIStroke", {Parent=PICKER_FRAME, Color=Library.Colors.BorderColor})

                    local HUE_SLIDER = Library:Create("ImageLabel", {
                        Parent = PICKER_FRAME, Position=UDim2.new(1,-15,0,5), Size = UDim2.new(0,10,1,-10), Image = "rbxassetid://2615692420"
                    })
                    local HUE_PICKER = Library:Create("Frame", { Parent=HUE_SLIDER, Size=UDim2.new(1,2,0,3), Position=UDim2.fromScale(0.5,0), AnchorPoint=Vector2.new(0.5,0.5), BackgroundColor3=Color3.new(1,1,1)})

                    local SV_PANEL = Library:Create("Frame", { Parent = PICKER_FRAME, Position=UDim2.new(0,5,0,5), Size=UDim2.new(1,-25,1,-10) })
                    local SATURATION_GRAD = Library:Create("UIGradient", {Parent = SV_PANEL, Color = ColorSequence.new{ColorSequenceKeypoint.new(0,Color3.new(1,1,1)), ColorSequenceKeypoint.new(1,Color3.new(1,1,1))}, Rotation=0})
                    local VALUE_GRAD = Library:Create("UIGradient", {Parent=SV_PANEL, Color = ColorSequence.new{ColorSequenceKeypoint.new(0, Color3.fromHSV(0,0,1)), ColorSequenceKeypoint.new(1,Color3.fromHSV(0,0,0))}, Rotation=90})
                    local SV_PICKER = Library:Create("Frame",{ Parent=SV_PANEL, Size=UDim2.new(0,5,0,5), BackgroundTransparency=1, ZIndex = 100, AnchorPoint=Vector2.new(0.5,0.5)})
                    Library:Create("UIStroke", { Parent=SV_PICKER, Color=Color3.new(1,1,1), Thickness=1 })
                    
                    local function update_color(h,s,v)
                        colorpicker_state.color = Color3.fromHSV(h,s,v)
                        PREVIEW.BackgroundColor3 = colorpicker_state.color
                        SATURATION_GRAD.Color = ColorSequence.new{ColorSequenceKeypoint.new(0,Color3.fromHSV(h,0,1)), ColorSequenceKeypoint.new(1,Color3.fromHSV(h,1,1))}
                        color_options.callback(colorpicker_state.color)
                    end
                    
                    local function set_picker_from_color(col)
                        local h,s,v = Color3.toHSV(col)
                        HUE_PICKER.Position = UDim2.fromScale(0.5, 1 - h)
                        SV_PICKER.Position = UDim2.fromScale(s, 1 - v)
                        update_color(h,s,v)
                    end
                    
                    local function picker_drag(frame, callback)
                        Library:connection(frame.InputBegan, function(input)
                            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                                callback(input.Position)
                                local move_conn, end_conn
                                move_conn = Library:connection(_uis.InputChanged, function(m_input) if m_input.UserInputType == Enum.UserInputType.MouseMovement then callback(m_input.Position) end end)
                                end_conn = Library:connection(_uis.InputEnded, function(e_input) if e_input.UserInputType == Enum.UserInputType.MouseButton1 then move_conn:Disconnect() end_conn:Disconnect() end end)
                            end
                        end)
                    end
                    
                    picker_drag(HUE_SLIDER, function(pos)
                        local relative_y = math.clamp((pos.Y - HUE_SLIDER.AbsolutePosition.Y) / HUE_SLIDER.AbsoluteSize.Y, 0, 1)
                        HUE_PICKER.Position = UDim2.fromScale(0.5, relative_y)
                        local _,s,v = Color3.toHSV(colorpicker_state.color)
                        update_color(1 - relative_y, s, v)
                    end)

                    picker_drag(SV_PANEL, function(pos)
                        local rel_x = math.clamp((pos.X - SV_PANEL.AbsolutePosition.X) / SV_PANEL.AbsoluteSize.X, 0, 1)
                        local rel_y = math.clamp((pos.Y - SV_PANEL.AbsolutePosition.Y) / SV_PANEL.AbsoluteSize.Y, 0, 1)
                        SV_PICKER.Position = UDim2.fromScale(rel_x, rel_y)
                        local h,_,_ = Color3.toHSV(colorpicker_state.color)
                        update_color(h, rel_x, 1 - rel_y)
                    end)
                    
                    Library:connection(PREVIEW.MouseButton1Click, function()
                        colorpicker_state.open = not colorpicker_state.open
                        PICKER_FRAME.Visible = colorpicker_state.open
                        if colorpicker_state.open then
                            PICKER_FRAME.Position = UDim2.new(0, PREVIEW.AbsolutePosition.X - 5, 0, PREVIEW.AbsolutePosition.Y)
                            set_picker_from_color(colorpicker_state.color)
                        end
                    end)

                    set_picker_from_color(color_options.default)
                end
                return toggle
            end
            
            function section:AddSlider(sld_options)
                sld_options = Library:validate({ name = "slider", default = 50, suffix = "", min = 0, max = 100, callback = function() end}, sld_options)
                
                local slider = { Dragging = false }
                
                local affectedScrollingFrames = {}
                local function findAffectedScrollingFrames()
                    affectedScrollingFrames = {}
                    local current = ELEMENTCONTAINER
                    while current do
                        if current:IsA("ScrollingFrame") then table.insert(affectedScrollingFrames, current) end
                        current = current.Parent
                    end
                end

                local HOLDER = Library:Create("Frame", {Size=UDim2.new(1,0,0,25), Parent=ELEMENTCONTAINER, BackgroundTransparency=1})
                Library:Create("TextLabel",{ Parent=HOLDER, Position=UDim2.new(0,0,0,-2), Size=UDim2.new(0.7,0,1,0), BackgroundTransparency=1, TextColor3=Library.Colors.TabInactive, Text=sld_options.name, TextSize=9, FontFace=Library.Font, TextXAlignment=Enum.TextXAlignment.Left})
                local SLIDER_TEXTBOX = Library:Create("TextBox", { Parent=HOLDER, Position=UDim2.new(1,-50,0,5), Size=UDim2.new(0,50,0,14), BackgroundColor3=Library.Colors.ElementInactive, Text=tostring(sld_options.default), TextColor3=Library.Colors.TabInactive, FontFace=Library.Font, TextSize=9, BorderSizePixel=0 })
                Library:Create("UIStroke", {Parent=SLIDER_TEXTBOX, Color=Library.Colors.BorderColor})
                local SLIDER_BACK = Library:Create("Frame", { Parent = HOLDER, Size=UDim2.new(1,-60,0,6), AnchorPoint=Vector2.new(0,0), Position=UDim2.new(0,0,0,10), BackgroundColor3=Library.Colors.ElementInactive})
                Library:Create("UIStroke", {Parent=SLIDER_BACK, Color=Library.Colors.BorderColor})
                local SLIDER_FRONT = Library:Create("Frame", {Parent=SLIDER_BACK, BackgroundColor3=Library.Colors.Accent, Size=UDim2.fromScale(0,1)})
                
                function slider:Update(value)
                    local percent = (value - sld_options.min) / (sld_options.max - sld_options.min)
                    Library:tween(SLIDER_FRONT, {Size=UDim2.fromScale(percent,1)})
                    sld_options.callback(value)
                end
                
                function slider:SetValueFromInput()
                    local value = math.clamp(tonumber(SLIDER_TEXTBOX.Text) or sld_options.min, sld_options.min, sld_options.max)
                    SLIDER_TEXTBOX.Text = tostring(math.floor(value))
                    slider:Update(value)
                end
                
                Library:connection(SLIDER_BACK.InputBegan, function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        slider.Dragging = true
                        findAffectedScrollingFrames()
                        for _, frame in ipairs(affectedScrollingFrames) do frame.ScrollingEnabled = false end
                        _cas:BindAction("BlockScroll_"..sld_options.name, function() return Enum.ContextActionResult.Sink end, false, Enum.UserInputType.MouseWheel)

                        local function update_drag(d_input)
                            local percent = math.clamp((d_input.Position.X - SLIDER_BACK.AbsolutePosition.X) / SLIDER_BACK.AbsoluteSize.X, 0, 1)
                            local value = sld_options.min + (sld_options.max - sld_options.min) * percent
                            SLIDER_TEXTBOX.Text = tostring(math.floor(value))
                            slider:Update(value)
                        end
                        update_drag(input)

                        local move_conn, end_conn
                        move_conn = Library:connection(_uis.InputChanged, function(m_input) if m_input.UserInputType == Enum.UserInputType.MouseMovement then update_drag(m_input) end end)
                        end_conn = Library:connection(_uis.InputEnded, function(e_input) 
                            if e_input.UserInputType == Enum.UserInputType.MouseButton1 then
                                slider.Dragging = false
                                for _, frame in ipairs(affectedScrollingFrames) do frame.ScrollingEnabled = true end
                                _cas:UnbindAction("BlockScroll_"..sld_options.name)
                                move_conn:Disconnect() end_conn:Disconnect()
                            end 
                        end)
                    end
                end)
                
                Library:connection(SLIDER_TEXTBOX.FocusLost, function(enter) if enter then slider:SetValueFromInput() end end)
                
                slider:Update(sld_options.default)
                return slider 
            end

            function section:AddDropdown(dd_options)
                dd_options = Library:validate({name="dropdown", list={"example"}, multi=false, callback=function() end}, dd_options)
                dropdownindex -= 1
                
                local dropdown = { open = false, selection = dd_options.list[1] }
                
                local HOLDER = Library:Create("Frame",{Parent=ELEMENTCONTAINER, Size=UDim2.new(1,0,0,30), BackgroundTransparency=1, ZIndex=dropdownindex})
                Library:Create("TextLabel", {Parent=HOLDER, Size=UDim2.fromScale(1,0.5), BackgroundTransparency=1, FontFace=Library.Font, TextColor3=Library.Colors.TabInactive, Text=dd_options.name, TextSize=9, TextXAlignment=Enum.TextXAlignment.Left})

                local BUTTON = Library:Create("TextButton", {Parent=HOLDER, Position=UDim2.new(0,0,0.5,0), Size=UDim2.new(1,0,0,15), Text="", BackgroundColor3=Library.Colors.ElementInactive, AutoButtonColor=false})
                Library:Create("UIStroke",{Parent=BUTTON,Color=Library.Colors.BorderColor})
                
                local ACTIVE_TEXT = Library:Create("TextLabel",{ Parent=BUTTON, Size=UDim2.fromScale(1,1), BackgroundTransparency=1, FontFace=Library.Font, TextColor3=Library.Colors.TabInactive, Text=dropdown.selection, TextSize=9})

                local CHOICES_HOLDER = Library:Create("ScrollingFrame",{
                    Parent=HOLDER, Position=UDim2.new(0,0,1,0), Size=UDim2.new(1,0,0,0), BackgroundColor3=Library.Colors.ElementInactive,
                    BorderSizePixel=0, ZIndex=dropdownindex+1, AutomaticCanvasSize = Enum.AutomaticSize.Y, ScrollBarThickness=3
                })
                Library:Create("UIListLayout", {Parent=CHOICES_HOLDER, Padding = UDim.new(0,1)})
                Library:Create("UIStroke", {Parent=CHOICES_HOLDER, Color=Library.Colors.BorderColor})

                for i, name in ipairs(dd_options.list) do
                    local choice_btn = Library:Create("TextButton",{
                        Parent=CHOICES_HOLDER, Size=UDim2.new(1,0,0,15), BackgroundTransparency=1, AutoButtonColor=false,
                        Text="", LayoutOrder=i
                    })
                    local choice_text = Library:Create("TextLabel",{
                        Parent=choice_btn, Size=UDim2.fromScale(1,1), BackgroundTransparency=1, FontFace=Library.Font, Text=name, TextSize=9,
                        TextColor3 = name == dropdown.selection and Library.Colors.Accent or Library.Colors.TabInactive
                    })

                    Library:connection(choice_btn.MouseButton1Click, function()
                        dropdown.selection = name
                        dd_options.callback(dropdown.selection)
                        ACTIVE_TEXT.Text = dropdown.selection
                        for _, other_btn in ipairs(CHOICES_HOLDER:GetChildren()) do
                            if other_btn:IsA("TextButton") then
                                other_btn:FindFirstChildOfClass("TextLabel").TextColor3 = other_btn:FindFirstChildOfClass("TextLabel").Text == name and Library.Colors.Accent or Library.Colors.TabInactive
                            end
                        end
                        BUTTON.MouseButton1Click:Fire() 
                    end)
                    Library:connection(choice_btn.MouseEnter, function() if choice_text.Text ~= dropdown.selection then Library:tween(choice_text,{TextColor3 = Library.Colors.TabActive}) end end)
                    Library:connection(choice_btn.MouseLeave, function() if choice_text.Text ~= dropdown.selection then Library:tween(choice_text,{TextColor3 = Library.Colors.TabInactive}) end end)
                end

                Library:connection(BUTTON.MouseButton1Click, function()
                    dropdown.open = not dropdown.open
                    local list_size = #CHOICES_HOLDER:GetChildren() * 16
                    local target_height = dropdown.open and math.min(list_size, 90) or 0
                    local holder_height = 30 + target_height
                    Library:tween(HOLDER, {Size = UDim2.new(1,0,0,holder_height)})
                    Library:tween(CHOICES_HOLDER, {Size=UDim2.new(1,0,0,target_height)})
                end)
            end

            function section:AddList(list_options)
                list_options = Library:validate({name = "list", list = {"item 1"}, callback=function() end}, list_options)

                local list = { Selection = "" }

                local LIST_HOLDER = Library:Create("ScrollingFrame", {
                    Parent = ELEMENTCONTAINER, Size = UDim2.new(1,0,0,80), BackgroundColor3=Library.Colors.ElementInactive,
                    BorderSizePixel=0, AutomaticCanvasSize=Enum.AutomaticSize.Y, ScrollBarThickness=3
                })
                Library:Create("UIStroke",{Parent=LIST_HOLDER, Color=Library.Colors.BorderColor})
                Library:Create("UIListLayout", {Parent=LIST_HOLDER, Padding=UDim.new(0,2)})
                
                for _, name in ipairs(list_options.list) do
                    local item_btn = Library:Create("TextButton",{
                        Parent=LIST_HOLDER, Size=UDim2.new(1,0,0,18), BackgroundTransparency=1, Text="", AutoButtonColor=false, Name = name
                    })
                    local item_text = Library:Create("TextLabel",{
                        Parent=item_btn, Size=UDim2.fromScale(1,1), BackgroundTransparency=1, FontFace=Library.Font, Text=name, TextSize=9,
                        TextColor3=Library.Colors.TabInactive
                    })

                    Library:connection(item_btn.MouseButton1Click, function()
                        list.Selection = name
                        list_options.callback(name)
                        for _, other_btn in ipairs(LIST_HOLDER:GetChildren()) do
                           if other_btn:IsA("TextButton") then
                               local is_selected = other_btn.Name == item_btn.Name
                               other_btn:FindFirstChildOfClass("TextLabel").TextColor3 = is_selected and Library.Colors.Accent or Library.Colors.TabInactive
                               other_btn.BackgroundColor3 = is_selected and Library.Colors.BorderColor or Color3.new()
                               other_btn.BackgroundTransparency = is_selected and 0.5 or 1
                           end
                        end
                    end)
                end
            end
            
            return section
        end
        return tab
    end

    Library:connection(_uis.InputBegan, function(input, gp)
        if gp then return end
        if input.KeyCode == Library.Ui_Bind then WINDOW.Visible = not WINDOW.Visible end
        if input.KeyCode == Enum.KeyCode.Delete then Library:unload() end
    end)
    
    do
        local CURSOR = Library:Create("ImageLabel", {
            Size = UDim2.new(0, 15, 0, 15), BackgroundTransparency = 1, ImageColor3 = Library.Colors.Accent,
            Image = "rbxassetid://6349284274", ZIndex = 101, Parent = SCREENGUI, AnchorPoint = Vector2.new(0.5,0.5)
        })
        Library:connection(_runservice.RenderStepped, function() CURSOR.Position = UDim2.fromOffset(mouse.X, mouse.Y) end)
    end
    
    do
        local dragging, dragInput, startPos, dragStart
        Library:connection(TOPBAR.InputBegan, function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging, dragInput = true, input
                startPos, dragStart = WINDOW.Position, input.Position
            end
        end)
    
        Library:connection(_uis.InputChanged, function(input)
            if input == dragInput and dragging then
                local delta = input.Position - dragStart
                WINDOW.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
            end
        end)
    
        Library:connection(_uis.InputEnded, function(input) if input == dragInput then dragging = false end end)
    end
    
    return menu
end 
return ab.AddWindow()
